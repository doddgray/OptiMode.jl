using Revise
using LinearAlgebra, StaticArrays, ArrayInterface, FFTW, LinearMaps, IterativeSolvers, ChainRules, Tullio, Plots, BenchmarkTools
using FiniteDifferences, ForwardDiff, Zygote # ReverseDiff
using OptiMode #  DataFrames, CSV,
# using ChainRulesTestUtils, Test
#include("eigen_rules.jl")

## Test AD sensitivity analysis of random matrices using rrules defined above

function proc_eigs(Xone,Œ±one)
    sum2(x->abs2(x)^2,Xone) #* Œ±one^4
end

function A_from_p(p)
    N = Int(sqrt(length(p)))
    A0 = Zygote.Buffer(zeros(ComplexF64,(N,N)))
    for i = 1:N
        for j=1:i
            A0[j,i] = p[(sum(1:(i-1))+1)+j-1]
            # println("ind: $((sum(1:(i-1))+1)+j -1)")
        end
    end
    for i = 2:N
        for j=1:i-1
            A0[j,i] += p[ ((sum(1:N)) + (sum(1:(i-2))+1) + j -1) ]*im
            # println("ind: $((sum(1:N)) + (sum(1:(i-1))+1) + j -1)")
        end
    end
    A = Hermitian(copy(A0))
end

function foo(p)
    # A = Hermitian(diagm([ N-nn => p[(sum(1:(nn-1))+1:sum(1:nn))] for nn=1:N]...) + im*diagm([ N-nn => p[(sum(1:(nn-1))+1:sum(1:nn))] for nn=1:(N-1)]...))
    A = A_from_p(p)
    F = eigen(A)
    Œ± = F.values
    X = F.vectors
    Xone = Zygote.@showgrad(X[:,1])
    Œ±one = Zygote.@showgrad(Œ±[1])
    # sum(x->abs2(x)^6,Xone) * Œ±one^2
    proc_eigs(Xone,Œ±one)
end

function ‚àÇfoo_SJ(p,Œ±,X,Œ±ÃÑ,XÃÑ;i=1)
    # A = Hermitian(diagm([ N-nn => p[(sum(1:(nn-1))+1:sum(1:nn))] for nn=1:N]...) + im*diagm([ N-nn => p[(sum(1:(nn-1))+1:sum(1:nn))] for nn=1:(N-1)]...))
    # A = A_from_p(p)
    A, Ap_pb = Zygote.pullback(A_from_p,p)
    Œ±,X = eigen(A)
    XÃÑ,Œ±ÃÑ = Zygote.gradient(proc_eigs,X[:,1],Œ±[1])
    P = I - X[:,i] * X[:,i]'
    b = P * XÃÑ #[i]
    Œª‚ÇÄ = IterativeSolvers.bicgstabl(A-Œ±[i]*I,b,3)
    if isnothing(Œ±ÃÑ)
        Œ±ÃÑ = 0.
    end
    Œª = Œª‚ÇÄ - Œ±ÃÑ * X[:,i]
    AÃÑ = -Œª * X[:,i]'
    Ap_pb(AÃÑ)
end

N = 30
p = randn(Float64,N^2)
# A = Hermitian(diagm([ N-nn => p[(sum(1:(nn-1))+1:sum(1:nn))] for nn=1:N]...) + im*diagm([ N-nn => p[(sum(1:(nn-1))+1:sum(1:nn))] for nn=1:(N-1)]...))
# A0 = zeros(ComplexF64,(N,N))
# for i = 1:N
#     for j=1:i
#         A0[j,i] = p[(sum(1:(i-1))+1)+j-1]
#         # println("ind: $((sum(1:(i-1))+1)+j -1)")
#     end
# end
# for i = 2:N
#     for j=1:i-1
#         A0[j,i] += p[ ((sum(1:N)) + (sum(1:(i-2))+1) + j -1) ]*im
#         # println("ind: $((sum(1:N)) + (sum(1:(i-1))+1) + j -1)")
#     end
# end
A = A_from_p(p)
Œ±,X = eigen(A)
foo(p)
n_FD = 2
# plot(Œ±,label="eigvals(A)",legend=:bottomright);scatter!(Œ±,label=nothing)
proc_eigs(X[:,1],Œ±[1])
foo(p)
XÃÑ,Œ±ÃÑ = Zygote.gradient(proc_eigs,X[:,1],Œ±[1])
pÃÑ_AD = real.(Zygote.gradient(foo,p)[1])
pÃÑ_FD = FiniteDifferences.grad(central_fdm(n_FD, 1),foo,p)[1]
pÃÑ_SJ = real.(‚àÇfoo_SJ(p,Œ±,X,Œ±ÃÑ,XÃÑ)[1])
using Plots: plot, plot!, scatter, scatter!
pp = plot([-maximum(abs.(pÃÑ_AD)),maximum(abs.(pÃÑ_AD))],[-maximum(abs.(pÃÑ_AD)),maximum(abs.(pÃÑ_AD))],c=:black,label="y=x",legend=:bottomright)
scatter!(pÃÑ_AD,pÃÑ_FD,label="AD/FD")
scatter!(pÃÑ_AD,pÃÑ_SJ,label="AD/SJ")
# AÃÑ·µ¢‚±º_ADr = vec(real.(AÃÑ_AD))
# AÃÑ·µ¢‚±º_ADi = vec(imag.(AÃÑ_AD))
# AÃÑ·µ¢‚±º_FDr = vec(real.(AÃÑ_FD))
# AÃÑ·µ¢‚±º_FDi = vec(imag.(AÃÑ_FD))
# AÃÑ·µ¢‚±º_SJr = vec(real.(AÃÑ_SJ))
# AÃÑ·µ¢‚±º_SJi = vec(imag.(AÃÑ_SJ))
#
# using Plots: plot, plot!, scatter, scatter!
# p = plot([-1,1],[-1,1],c=:black,label="y=x",legend=:bottomright)
# scatter!(AÃÑ·µ¢‚±º_ADr,AÃÑ·µ¢‚±º_FDr,label="AD/FD_r")
# scatter!(AÃÑ·µ¢‚±º_ADi,AÃÑ·µ¢‚±º_FDi,label="AD/FD_i")
# scatter!(AÃÑ·µ¢‚±º_ADr,AÃÑ·µ¢‚±º_SJr,label="SJ/AD_r")
# scatter!(AÃÑ·µ¢‚±º_ADi,AÃÑ·µ¢‚±º_SJi,label="SJ/AD_i")

# [ ( A*X‚Éó[:,i] - Œ±[i] * X‚Éó[:,i]) for i = 1:N]

## Now test eigen rrule fns with Helmholtz Operator matrices
"""
Default design parameters for ridge waveguide. Both MPB and OptiMode functions
should intake data in this format for convenient apples-to-apples comparison.
"""
p0 = [
    1.45,               #   propagation constant    `kz`            [Œºm‚Åª¬π]
    1.7,                #   top ridge width         `w_top`         [Œºm]
    0.7,                #   ridge thickness         `t_core`        [Œºm]
    œÄ / 14.0,           #   ridge sidewall angle    `Œ∏`             [radian]
    2.4,                #   core index              `n_core`        [1]
    1.4,                #   substrate index         `n_subs`        [1]
    0.5,                #   vacuum gap at boundaries `edge_gap`     [Œºm]
]

function kxt2c_matrix(mag,mn) #; Nx = 16, Ny = 16, Nz = 1)
    Nx, Ny, Nz = size(mag)
    kxt2c_matrix_buf = Zygote.bufferfrom(zeros(ComplexF64,(3*Nx*Ny*Nz),(2*Nx*Ny*Nz)))
    for ix=1:Nx,iy=1:Ny,iz=1:Nz,a=1:3 #,b=1:2
        q = Nx * Ny * (iz - 1) + Nx * (iy - 1) + ix
        # reference from kcross_t2c!:
        #       ds.d[1,i,j,k] = ( ds.H[1,i,j,k] * ds.mn[1,2,i,j,k] - ds.H[2,i,j,k] * ds.mn[1,1,i,j,k] ) * -ds.kpg_mag[i,j,k]
        #       ds.d[2,i,j,k] = ( ds.H[1,i,j,k] * ds.mn[2,2,i,j,k] - ds.H[2,i,j,k] * ds.mn[2,1,i,j,k] ) * -ds.kpg_mag[i,j,k]
        #       ds.d[3,i,j,k] = ( ds.H[1,i,j,k] * ds.mn[3,2,i,j,k] - ds.H[2,i,j,k] * ds.mn[3,1,i,j,k] ) * -ds.kpg_mag[i,j,k]
        # which implements d‚Éó = k√ó‚Çú‚ÇÇc ‚ãÖ H‚Éó
        # Here we want to explicitly define the matrix k√ó‚Çú‚ÇÇc
        # the general indexing scheme:
        # kxt2c_matrix_buf[ (3*q-2)+a-1 ,(2*q-1) + (b-1) ] <==> mn[a,b,ix,iy,iz], mag[ix,iy,iz]
        # b = 1  ( m‚Éó )
        kxt2c_matrix_buf[(3*q-2)+a-1,(2*q-1)] = mn[a,2,ix,iy,iz] * mag[ix,iy,iz]
        # b = 2  ( n‚Éó )
        kxt2c_matrix_buf[(3*q-2)+a-1,(2*q-1)+1] = mn[a,1,ix,iy,iz] * -mag[ix,iy,iz]
    end
    return copy(kxt2c_matrix_buf)
end

function kxt2c_matrix(p = p0;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 16,
                    Ny = 16,
                    Nz = 1)
    # kz, w, t_core, Œ∏, n_core, n_subs, edge_gap = p
    grid = OptiMode.make_MG(Œîx, Œîy, Œîz, Nx, Ny, Nz)
    mag,mn = calc_kpg(p[1],grid.g‚Éó)
    return kxt2c_matrix(mag,mn)
end

function zxt2c_matrix(mn::AbstractArray{T,5}) where T #; Nx = 16, Ny = 16, Nz = 1)
    Nx, Ny, Nz = size(mn)[3:5]
    zxt2c_matrix_buf = Zygote.bufferfrom(zeros(ComplexF64,(3*Nx*Ny*Nz),(2*Nx*Ny*Nz)))
    for ix=1:Nx,iy=1:Ny,iz=1:Nz #,b=1:2 #,a=1:2
        q = Nx * Ny * (iz - 1) + Nx * (iy - 1) + ix
        # reference from zcross_t2c!:
        #          ds.d[1,i,j,k] = -Hin[1,i,j,k] * ds.mn[2,1,i,j,k] - Hin[2,i,j,k] * ds.mn[2,2,i,j,k]
        #          ds.d[2,i,j,k] =  Hin[1,i,j,k] * ds.mn[1,1,i,j,k] + Hin[2,i,j,k] * ds.mn[1,2,i,j,k]
        #          ds.d[3,i,j,k] = 0
        # which implements d‚Éó = z√ó‚Çú‚ÇÇc ‚ãÖ H‚Éó
        # Here we want to explicitly define the matrix z√ó‚Çú‚ÇÇc
        # the general indexing scheme:
        # zxt2c_matrix_buf[ (3*q-2)+a-1 ,(2*q-1) + (b-1) ] <==> mn[a,b,ix,iy,iz]
        # a = 1  ( xÃÇ ), b = 1  ( m‚Éó )
        zxt2c_matrix_buf[(3*q-2),(2*q-1)] = -mn[2,1,ix,iy,iz]
        # a = 1  ( xÃÇ ), b = 2  ( n‚Éó )
        zxt2c_matrix_buf[(3*q-2),2*q] = -mn[2,2,ix,iy,iz]
        # a = 2  ( yÃÇ ), b = 1  ( m‚Éó )
        zxt2c_matrix_buf[(3*q-2)+1,(2*q-1)] = mn[1,1,ix,iy,iz]
        # a = 2  ( yÃÇ ), b = 2  ( n‚Éó )
        zxt2c_matrix_buf[(3*q-2)+1,2*q] = mn[1,2,ix,iy,iz]
    end
    return copy(zxt2c_matrix_buf)
end

function zxt2c_matrix(p = p0;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 16,
                    Ny = 16,
                    Nz = 1)
    # kz, w, t_core, Œ∏, n_core, n_subs, edge_gap = p
    grid = OptiMode.make_MG(Œîx, Œîy, Œîz, Nx, Ny, Nz)
    mag,mn = calc_kpg(p[1],grid.g‚Éó)
    return zxt2c_matrix(mn)
end

function ei_dot_rwg(p = p0;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 16,
                    Ny = 16,
                    Nz = 1)
    kz, w, t_core, Œ∏, n_core, n_subs, edge_gap = p
    # (w,t_core,Œ∏,edge_gap,n_core,n_subs,Œîx,Œîy,Œîz,Nx,Ny,Nz)
    grid = OptiMode.make_MG(Œîx, Œîy, Œîz, Nx, Ny, Nz)
    shapes = ridge_wg(w,t_core,Œ∏,edge_gap,n_core,n_subs,Œîx,Œîy)
    ei_field = make_Œµ‚Çõ‚Åª¬π(shapes,grid)
    # ei_matrix_buf = Zygote.bufferfrom(zeros(Float64,(3*Nx*Ny*Nz),(3*Nx*Ny*Nz)))
    ei_matrix_buf = Zygote.bufferfrom(zeros(ComplexF64,(3*Nx*Ny*Nz),(3*Nx*Ny*Nz)))
    for i=1:Nx,j=1:Ny,a=1:3,b=1:3
        q = (Ny * (j-1) + i)
        ei_matrix_buf[(3*q-2)+a-1,(3*q-2)+b-1] = ei_field[a,b,i,j,1]
    end
    # return copy(ei_matrix_buf)
    return Hermitian(copy(ei_matrix_buf))
end

function M_components(p = p0;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 16,
                    Ny = 16,
                    Nz = 1)
    kz, w, t_core, Œ∏, n_core, n_subs, edge_gap = p
    #(kz,w,t_core,edge_gap,n_core,n_subs,Œîx,Œîy,Œîz,NxF,NyF,NzF)
    # Nx,Ny,Nz = Zygote.ignore() do
    #     (Int(round(NxF)),Int(round(NyF)),Int(round(NzF)))
    # end
    mag, mn = calc_kpg(kz, Œîx, Œîy, Œîz, Nx, Ny, Nz)
    kcr_t2c = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(H::AbstractArray{ComplexF64,1} -> vec( kx_t2c( reshape(H,(2,Nx,Ny,Nz)), mn, mag ) )::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),*(2,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    ùìï = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(fft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end

    ùìï‚Åª¬π = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(ifft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    kcr_c2t = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(H::AbstractArray{ComplexF64,1} -> vec( kx_c2t( reshape(H,(3,Nx,Ny,Nz)), mn, mag ) )::AbstractArray{ComplexF64,1},*(2,Nx,Ny,Nz),*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    eeii = ei_dot_rwg(p;Œîx,Œîy,Œîz,Nx,Ny,Nz)
    return ( kcr_c2t, ùìï‚Åª¬π, eeii, ùìï, kcr_t2c )
end

function make_M_old(p = p0;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 16,
                    Ny = 16,
                    Nz = 1)
    kz, w, t_core, Œ∏, n_core, n_subs, edge_gap = p
    mag, mn = calc_kpg(kz, Œîx, Œîy, Œîz, Nx, Ny, Nz)
    kcr_t2c = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(H::AbstractArray{ComplexF64,1} -> vec( kx_t2c( reshape(H,(2,Nx,Ny,Nz)), mn, mag ) )::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),*(2,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    ùìï = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(fft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    ùìï‚Åª¬π = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(ifft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    kcr_c2t = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(H::AbstractArray{ComplexF64,1} -> vec( kx_c2t( reshape(H,(3,Nx,Ny,Nz)), mn, mag ) )::AbstractArray{ComplexF64,1},*(2,Nx,Ny,Nz),*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    eeii = ei_dot_rwg(p;Œîx,Œîy,Œîz,Nx,Ny,Nz)
    M = -kcr_c2t * ùìï‚Åª¬π * eeii * ùìï * kcr_t2c
    # @assert M' ‚âà M
    return Hermitian(M)
end

function make_M(p = p0;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 16,
                    Ny = 16,
                    Nz = 1)
    kz, w, t_core, Œ∏, n_core, n_subs, edge_gap = p
    mag, mn = calc_kpg(kz, Œîx, Œîy, Œîz, Nx, Ny, Nz)
    kcr_t2c = kxt2c_matrix(mag,mn)
    ùìï = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(fft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    ùìï‚Åª¬π = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(ifft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    kcr_c2t = -kcr_t2c'
    eeii = ei_dot_rwg(p;Œîx,Œîy,Œîz,Nx,Ny,Nz)
    M = -kcr_c2t * ùìï‚Åª¬π * eeii * ùìï * kcr_t2c
    return Hermitian(M)
end

function make_M‚Çñ(p = p0;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 16,
                    Ny = 16,
                    Nz = 1)
    kz, w, t_core, Œ∏, n_core, n_subs, edge_gap = p
    mag, mn = calc_kpg(kz, Œîx, Œîy, Œîz, Nx, Ny, Nz)
    zcr_t2c = zxt2c_matrix(mn)
    ùìï = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(fft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    ùìï‚Åª¬π = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(ifft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    kcr_c2t = -kxt2c_matrix(mag,mn)'
    eeii = ei_dot_rwg(p;Œîx,Œîy,Œîz,Nx,Ny,Nz)
    -kcr_c2t * ùìï‚Åª¬π * eeii * ùìï * zcr_t2c
end

function make_M_eidot(p,
                    eidot::Hermitian;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 16,
                    Ny = 16,
                    Nz = 1)
    kz, w, t_core, Œ∏, n_core, n_subs, edge_gap = p
    mag, mn = calc_kpg(kz, Œîx, Œîy, Œîz, Nx, Ny, Nz)
    kcr_t2c = kxt2c_matrix(mag,mn)
    ùìï = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(fft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    ùìï‚Åª¬π = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(ifft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    kcr_c2t = -transpose(kcr_t2c) #-kcr_t2c'
    M = -kcr_c2t * ùìï‚Åª¬π * eidot * ùìï * kcr_t2c
    return Hermitian(M)
end

function make_M‚Çñ_eidot(p,
                    eidot::Hermitian;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 16,
                    Ny = 16,
                    Nz = 1)
    kz, w, t_core, Œ∏, n_core, n_subs, edge_gap = p
    mag, mn = calc_kpg(kz, Œîx, Œîy, Œîz, Nx, Ny, Nz)
    zcr_t2c = zxt2c_matrix(mn)
    ùìï = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(fft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    ùìï‚Åª¬π = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(ifft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    kcr_c2t = -transpose(kxt2c_matrix(mag,mn)) #-kxt2c_matrix(mag,mn)'
    -kcr_c2t * ùìï‚Åª¬π * eidot * ùìï * zcr_t2c
end

function make_M(eidot::Hermitian,kcr_t2c)
    # kcr_t2c = kxt2c_matrix(mag,mn)
    ùìï = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(fft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    ùìï‚Åª¬π = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(ifft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    kcr_c2t = -kcr_t2c'
    M = -kcr_c2t * ùìï‚Åª¬π * eidot * ùìï * kcr_t2c
    return Hermitian(M)
end

function make_M(eidot::Hermitian,mag,mn)
    kcr_t2c = kxt2c_matrix(mag,mn)
    ùìï = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(fft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    ùìï‚Åª¬π = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(ifft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    kcr_c2t = -kcr_t2c'
    M = -kcr_c2t * ùìï‚Åª¬π * eidot * ùìï * kcr_t2c
    return Hermitian(M)
end

function make_M‚Çñ(eidot::Hermitian,mag,mn)
    zcr_t2c = zxt2c_matrix(mn)
    ùìï = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(fft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    ùìï‚Åª¬π = Zygote.ignore() do
        Matrix(LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(ifft(reshape(d,(3,Nx,Ny,Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,Nx,Ny,Nz),ishermitian=false,ismutating=false))
    end
    kcr_c2t = -kxt2c_matrix(mag,mn)'
    -kcr_c2t * ùìï‚Åª¬π * eidot * ùìï * zcr_t2c
end

function proc_eigs(p,Xone,Œ±one;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 16,
                    Ny = 16,
                    Nz = 1)
    # sum2(x->abs2(x)^2,Xone) * abs2(Œ±one)^2
    # sqrt(real(Œ±one)) / real(dot(Xone,make_M‚Çñ(p;Œîx,Œîy,Œîz,Nx,Ny,Nz),Xone))
    # sqrt(Œ±one) / abs(dot(Xone,make_M‚Çñ(p;Œîx,Œîy,Œîz,Nx,Ny,Nz),Xone))
    sqrt(real(Œ±one)) / real(dot(Xone,make_M‚Çñ(p;Œîx,Œîy,Œîz,Nx,Ny,Nz),Xone))
end

function proc_eigs(eidot::Hermitian,mag,mn,Xone,Œ±one)
    # sum2(x->abs2(x)^2,Xone) * abs2(Œ±one)^2
    # sqrt(real(Œ±one)) / real(dot(Xone,make_M‚Çñ(p;Œîx,Œîy,Œîz,Nx,Ny,Nz),Xone))
    # sqrt(Œ±one) / abs(dot(Xone,make_M‚Çñ(eidot,mag,mn),Xone))
    sqrt(real(Œ±one)) / real(dot(Xone,make_M‚Çñ(eidot,mag,mn),Xone))
end

function proc_eigs_eidot(p,eidot::Hermitian,Xone,Œ±one;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 16,
                    Ny = 16,
                    Nz = 1)
    # sum2(x->abs2(x)^2,Xone) * abs2(Œ±one)^2
    sqrt(real(Œ±one)) / real(dot(Xone,make_M‚Çñ_eidot(p,eidot;Œîx,Œîy,Œîz,Nx,Ny,Nz),Xone))
end

function solve_dense(p = p0;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 16,
                    Ny = 16,
                    Nz = 1)
    # kz, w, t_core, Œ∏, n_core, n_subs, edge_gap = p
    Eigs = eigen(make_M(p;Œîx,Œîy,Œîz,Nx,Ny,Nz))
    Xone = Eigs.vectors[:,1]
    Œ±one = Eigs.values[1]
    proc_eigs(p,Xone,Œ±one;Œîx,Œîy,Œîz,Nx,Ny,Nz)
    # proc_eigs(Xone,Œ±one)
end

function solve_dense(eidot::Hermitian,mag,mn)
    Eigs = eigen(make_M(eidot,mag,mn))
    Xone = Eigs.vectors[:,1]
    Œ±one = Eigs.values[1]
    proc_eigs(eidot,mag,mn,Xone,Œ±one)
end

function solve_dense_eidot(p,
                    eidot::Hermitian;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 16,
                    Ny = 16,
                    Nz = 1)
    kz, w, t_core, Œ∏, n_core, n_subs, edge_gap = p
    #(kz,eidot::Hermitian{ComplexF64, Matrix{ComplexF64}},Œîx,Œîy,Œîz,Nx,Ny,Nz)
    Eigs = eigen(make_M_eidot(p,eidot;Œîx,Œîy,Œîz,Nx,Ny,Nz))
    Xone = Eigs.vectors[:,1]
    Œ±one = Eigs.values[1]
    proc_eigs_eidot(p,eidot,Xone,Œ±one;Œîx,Œîy,Œîz,Nx,Ny,Nz)
end

function ‚àÇsolve_dense_SJ(p = p0;
                    Œîx  = 6.0,
                    Œîy  = 4.0,
                    Œîz  = 1.0,
                    Nx  = 16,
                    Ny  = 16,
                    Nz  = 1,
                    i   = 1)
    M, M_pb = Zygote.pullback(x->make_M(x;Œîx,Œîy,Œîz,Nx,Ny,Nz),p)
    Œ±,X = eigen(M)
    pÃÑ2,XÃÑ,Œ±ÃÑ = Zygote.gradient(p,X[:,1],Œ±[1]) do p,H,œâ¬≤
        proc_eigs(p,H,œâ¬≤;Œîx,Œîy,Œîz,Nx,Ny,Nz)
    end
    P = I - X[:,i] * X[:,i]'
    b = P * XÃÑ #[i]
    Œª‚ÇÄ = IterativeSolvers.bicgstabl(M-Œ±[i]*I,b,3)
    if isnothing(Œ±ÃÑ)
        Œ±ÃÑ = 0.
    end
    Œª = Œª‚ÇÄ - Œ±ÃÑ * X[:,i]
    MÃÑ = -Œª * X[:,i]'
    pÃÑ1 = M_pb(MÃÑ)[1]
    if isnothing(pÃÑ2)
        pÃÑ2 = zeros(eltype(p),size(p))
    end
    if isnothing(pÃÑ1)
        pÃÑ1 = zeros(eltype(p),size(p))
    end
    pÃÑ2 + pÃÑ1
end
function ei_field2matrix(ei_field,Nx,Ny,Nz)
    ei_matrix_buf = Zygote.bufferfrom(zeros(ComplexF64,(3*Nx*Ny*Nz),(3*Nx*Ny*Nz)))
    for i=1:Nx,j=1:Ny,a=1:3,b=1:3
        q = (Ny * (j-1) + i)
        ei_matrix_buf[(3*q-2)+a-1,(3*q-2)+b-1] = ei_field[a,b,i,j,1]
    end
    # return copy(ei_matrix_buf)
    return Hermitian(copy(ei_matrix_buf))
end

function ei_matrix2field1(ei_matrix,Nx,Ny,Nz)
    ei_field = zeros(Float64,(3,3,Nx,Ny,Nz))
    D0 = diag(ei_matrix,0)
    D1 = diag(ei_matrix,1)
    D2 = diag(ei_matrix,2)
    for i=1:Nx,j=1:Ny,k=1:Nz #,a=1:3,b=1:3
        q = (Nz * (k-1) + Ny * (j-1) + i) # (Ny * (j-1) + i)
        ei_field[1,1,i,j,k] = real(D0[3*q-2])
        ei_field[2,2,i,j,k] = real(D0[3*q-1] )
        ei_field[3,3,i,j,k] = real(D0[3*q])
        ei_field[1,2,i,j,k] = real(D1[3*q-2])
        ei_field[2,1,i,j,k] = real(conj(D1[3*q-2]))
        ei_field[2,3,i,j,k] = real(D1[3*q-1])
        ei_field[3,2,i,j,k] = real(conj(D1[3*q-1]))
        ei_field[1,3,i,j,k] = real(D2[3*q-2])
        ei_field[3,1,i,j,k] = real(conj(D2[3*q-2]))
        # ei_matrix[(3*q-2)+a-1,(3*q-2)+b-1] = ei_field[a,b,i,j,1]
    end
    return ei_field
end

using ArrayInterface, LoopVectorization
function ei_matrix2field2(ei_matrix,Nx,Ny,Nz)
    ei_field = zeros(Float64,(3,3,Nx,Ny,Nz))
    D0 = diag(ei_matrix,0)
    D1 = diag(ei_matrix,1)
    D2 = diag(ei_matrix,2)
    @avx for i=1:Nx,j=1:Ny,k=1:Nz #,a=1:3,b=1:3
        q = (Nz * (k-1) + Ny * (j-1) + i) # (Ny * (j-1) + i)
        ei_field[1,1,i,j,k] = D0[3*q-2]
        ei_field[2,2,i,j,k] = D0[3*q-1]
        ei_field[3,3,i,j,k] = D0[3*q]
        ei_field[1,2,i,j,k] = D1[3*q-2]
        ei_field[2,1,i,j,k] = D1[3*q-2]
        ei_field[2,3,i,j,k] = D1[3*q-1]
        ei_field[3,2,i,j,k] = D1[3*q-1]
        ei_field[1,3,i,j,k] = D2[3*q-2]
        ei_field[3,1,i,j,k] = D2[3*q-2]
        # ei_matrix[(3*q-2)+a-1,(3*q-2)+b-1] = ei_field[a,b,i,j,1]
    end
    return ei_field
end

function ei_matrix2field3(ei_matrix,Nx,Ny,Nz)
    ei_field = zeros(Float64,(3,3,Nx,Ny,Nz))
    @avx for a=1:3,b=1:3,k=1:Nz,j=1:Ny,i=1:Nx
        q = (Nz * (k-1) + Ny * (j-1) + i) # (Ny * (j-1) + i)
        ei_field[a,b,i,j,k] = ei_matrix[(3*q-2)+a-1,(3*q-2)+b-1]
    end
    return ei_field
end

function ei_matrix2field4(d,Œªd,Nx,Ny,Nz)
    # ei_field = Hermitian(zeros(Float64,(3,3,Nx,Ny,Nz)),"U")
    ei_field = zeros(Float64,(3,3,Nx,Ny,Nz))
    @avx for k=1:Nz,j=1:Ny,i=1:Nx
        q = (Nz * (k-1) + Ny * (j-1) + i) # (Ny * (j-1) + i)
        for a=1:3 # loop over diagonals
            ei_field[a,a,i,j,k] = real( -Œªd[3*q-2+a-1] * conj(d[3*q-2+a-1]) )
        end
        for a2=1:2 # loop over first off diagonal
            ei_field[a2,a2+1,i,j,k] = real( -conj(Œªd[3*q-2+a2]) * d[3*q-2+a2-1] - Œªd[3*q-2+a2-1] * conj(d[3*q-2+a2]) )
            ei_field[a2+1,a2,i,j,k] = ei_field[a2,a2+1,i,j,k]  # D1[3*q-2]
        end
        # a = 1, set 1,3 and 3,1, second off-diagonal
        ei_field[1,3,i,j,k] = real( -conj(Œªd[3*q]) * d[3*q-2] - Œªd[3*q-2] * conj(d[3*q]) )
        ei_field[3,1,i,j,k] =  ei_field[1,3,i,j,k]
    end
    return ei_field
end

ei_matrix2field = ei_matrix2field4



## set discretization parameters and generate explicit dense matrices
Œîx          =   6.                    # Œºm
Œîy          =   4.                    # Œºm
Œîz          =   1.
Nx          =   16
Ny          =   16
Nz          =   1
kz          =   p0[1] #1.45
# œâ           =   1 / Œª
p = p0 #[kz,w,t_core,Œ∏,n_core,n_subs,edge_gap] #,Œîx,Œîy,Œîz,Nx,Ny,Nz]
eid = ei_dot_rwg(p;Œîx,Œîy,Œîz,Nx,Ny,Nz)
g = MaxwellGrid(Œîx,Œîy,Œîz,Nx,Ny,Nz)
ds = MaxwellData(p[1],g)
ei = make_Œµ‚Çõ‚Åª¬π(ridge_wg(p[2],p[3],p[4],p[7],p[5],p[6],Œîx,Œîy),g)
# eii = similar(ei); [ (eii[a,b,i,j,k] = inv(ei[:,:,i,j,k])[a,b]) for a=1:3,b=1:3,i=1:Nx,j=1:Ny,k=1:Nz ] # eii = epsilon tensor field (eii for epsilon_inverse_inverse, yea it's dumb)
Mop = MÃÇ!(ei,ds)
Mop2 = MÃÇ(ei,ds)
M‚Çñop = MÃÇ‚Çñ(ei,ds.mn,ds.kpg_mag,ds.ùìï,ds.ùìï‚Åª¬π)
M = Matrix(Mop)
dMdk = Matrix(M‚Çñop)
mag,mn = calc_kpg(p[1],OptiMode.make_MG(Œîx, Œîy, Œîz, Nx, Ny, Nz).g‚Éó)
eid = ei_dot_rwg(p0)

make_M(eid,mag,mn) ‚âà M
make_M‚Çñ(eid,mag,mn) ‚âà -dMdk
make_M‚Çñ_eidot(p,eid) ‚âà -dMdk
make_M‚Çñ(p0) ‚âà -dMdk

ùìï = plan_fft(randn(ComplexF64, (3,Nx,Ny,Nz)),(2:4))
ùìï‚Åª¬π = plan_ifft(randn(ComplexF64, (3,Nx,Ny,Nz)),(2:4))
Mop2 = MÃÇ(ei,mn,mag,ùìï,ùìï‚Åª¬π)
M2 = Matrix(Mop2)
M2 ‚âà M


3

##
# MÃÇ(Œµ‚Åª¬π,mn,kpg_mag,ùìï,ùìï‚Åª¬π) = LinearMap{ComplexF64}(H::AbstractArray{ComplexF64,1} -> M(H,Œµ‚Åª¬π,mn,kpg_mag,ùìï,ùìï‚Åª¬π)::AbstractArray{ComplexF64,1},*(2,size(Œµ‚Åª¬π)[end-2:end]...),ishermitian=true,ismutating=false)
# function M(H,Œµ‚Åª¬π,mn,kpg_mag,ùìï::FFTW.cFFTWPlan,ùìï‚Åª¬π)
#     kx_c2t( ùìï‚Åª¬π * Œµ‚Åª¬π_dot( ùìï * kx_t2c(H,mn,kpg_mag), Œµ‚Åª¬π), mn,kpg_mag)
# end
kxt2c_op = LinearMap{ComplexF64}(H::AbstractArray{ComplexF64,1} -> vec( kx_t2c( reshape(H,(2,ds.Nx,ds.Ny,ds.Nz)), ds.mn, ds.kpg_mag ) )::AbstractArray{ComplexF64,1},*(3,ds.Nx,ds.Ny,ds.Nz),*(2,ds.Nx,ds.Ny,ds.Nz),ishermitian=false,ismutating=false)
kxt2c = Matrix(kxt2c_op)
F_op = LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(ds.ùìï*reshape(d,(3,ds.Nx,ds.Ny,ds.Nz)))::AbstractArray{ComplexF64,1},*(3,ds.Nx,ds.Ny,ds.Nz),ishermitian=false,ismutating=false)
# F_op = LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(fft(reshape(d,(3,ds.Nx,ds.Ny,ds.Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,ds.Nx,ds.Ny,ds.Nz),ishermitian=false,ismutating=false)
F = Matrix(F_op)
einv_op = LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec( Œµ‚Åª¬π_dot( reshape(d,(3,ds.Nx,ds.Ny,ds.Nz)), ei ) )::AbstractArray{ComplexF64,1},*(3,ds.Nx,ds.Ny,ds.Nz),ishermitian=false,ismutating=false)
einv = Matrix(einv_op)
Finv_op = LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(ds.ùìï‚Åª¬π*reshape(d,(3,ds.Nx,ds.Ny,ds.Nz)))::AbstractArray{ComplexF64,1},*(3,ds.Nx,ds.Ny,ds.Nz),ishermitian=false,ismutating=false)
# Finv_op = LinearMap{ComplexF64}(d::AbstractArray{ComplexF64,1} -> vec(bfft(reshape(d,(3,ds.Nx,ds.Ny,ds.Nz)),(2:4)))::AbstractArray{ComplexF64,1},*(3,ds.Nx,ds.Ny,ds.Nz),ishermitian=false,ismutating=false)
Finv = Matrix(Finv_op)
kxc2t_op = LinearMap{ComplexF64}(H::AbstractArray{ComplexF64,1} -> vec( kx_c2t( reshape(H,(3,ds.Nx,ds.Ny,ds.Nz)), ds.mn, ds.kpg_mag ) )::AbstractArray{ComplexF64,1},*(2,ds.Nx,ds.Ny,ds.Nz),*(3,ds.Nx,ds.Ny,ds.Nz),ishermitian=false,ismutating=false)
kxc2t = Matrix(kxc2t_op)
zxt2c_op = LinearMap{ComplexF64}(H::AbstractArray{ComplexF64,1} -> vec( zx_t2c( reshape(H,(2,ds.Nx,ds.Ny,ds.Nz)), ds.mn ) )::AbstractArray{ComplexF64,1},*(3,ds.Nx,ds.Ny,ds.Nz),*(2,ds.Nx,ds.Ny,ds.Nz),ishermitian=false,ismutating=false)
zxt2c = Matrix(zxt2c_op)

@assert -kxc2t * Finv * einv * F * kxt2c ‚âà M
@assert kxc2t * Finv * einv * F * zxt2c ‚âà dMdk # wrong sign?
@assert make_M(p;Œîx,Œîy,Œîz,Nx,Ny,Nz) ‚âà M
@assert make_M_eidot(p,eid;Œîx,Œîy,Œîz,Nx,Ny,Nz) ‚âà M
@assert ei_dot_rwg(p;Œîx,Œîy,Œîz,Nx,Ny,Nz) ‚âà einv
# if Finv is ifft
@assert F' ‚âà  Finv * ( size(F)[1]/3 )
@assert Finv' * ( size(F)[1]/3 ) ‚âà  F
# # if Finv is bfft
# @assert F' ‚âà Finv
# @assert Finv' ‚âà  F
@assert kxc2t' ‚âà -kxt2c
@assert kxt2c' ‚âà -kxc2t

# ix = 8
# iy = 4
# q = Nx * (iy - 1) + ix
# 3q-2:3q+3 # 3q-2:3q-2+6-1
# 2q-1:2q+2 # 2q-1:2q-1+4-1
#
# real(kxt2c[3q-2:3q+3,2q-1:2q+2])
@assert kxt2c_matrix(p0) ‚âà kxt2c
@assert kxt2c_matrix(mag,mn) ‚âà kxt2c
@assert zxt2c_matrix(mn) ‚âà zxt2c
# sum(kxt2c_matrix(p0))
# ‚àásum_kxt2c1 = Zygote.gradient(x->sum(real(kxt2c_matrix(x))), p0)[1]
#
# (mag, mn), magmn_pb = Zygote.pullback(p0) do p
#     calc_kpg(p[1],OptiMode.make_MG(Œîx, Œîy, Œîz, Nx, Ny, Nz).g‚Éó)
# end
#
# kxt2c, kxt2c_pb = Zygote.pullback(mag,mn) do mag,mn
#     kxt2c_matrix(mag,mn)
# end
#
# sum_kxt2c, sum_kxt2c_pb = Zygote.pullback(sum, kxt2c)
#
# # step-by-step pullback
# kxtÃÑ2c = sum_kxt2c_pb(1)[1]
# maÃÑg,mnÃÑ = kxt2c_pb(kxtÃÑ2c)
# pÃÑ = magmn_pb((maÃÑg,mnÃÑ))[1]
# @assert ei_field2matrix(ei,Nx,Ny,Nz) ‚âà eid
##
ei_dot_rwg(p0)
solve_dense(p0)
‚àÇsolve_dense_SJ(p0)
Zygote.gradient(solve_dense,p0)[1] ‚âà ‚àÇsolve_dense_SJ(p0)

## Finite Difference End-to-end (parameters to group velocity) gradient calculation for checking AD gradients
println("####################################################################################")
println("")
println("Finite Difference End-to-end (parameters to group velocity) gradient calculation for checking AD gradients")
println("")
println("####################################################################################")
@show Œîx          =   6.                    # Œºm
@show Œîy          =   4.                    # Œºm
@show Œîz          =   1.
@show Nx          =   16
@show Ny          =   16
@show Nz          =   1
@show p=p0
@show kz          =   p[1]
@show pÃÑ_FD = FiniteDifferences.jacobian(central_fdm(3,1),x->solve_dense(x),p0)[1][1,:]
## End-to-end (parameters to group velocity) gradient calculation with explicit matrices
println("####################################################################################")
println("")
println("End-to-end (parameters to group velocity) gradient calculation with explicit matrices")
println("")
println("####################################################################################")
p=p0
M, M_pb = Zygote.pullback(x->make_M(x;Œîx,Œîy,Œîz,Nx,Ny,Nz),p)
# M = make_M(p;Œîx,Œîy,Œîz,Nx,Ny,Nz)
Œ±X = eigen(M)
# @btime eigen(make_M($p...))
# 41.165 ms (32813 allocations: 9.78 MiB) for Nx=Ny=8, size(M)=(128,128)
# @btime eigen($M)
# 19.841 s (26 allocations: 132.17 MiB) for Nx=Ny=32, size(M)=(2048,2048)
# 864.363 ms (24 allocations: 9.04 MiB) for Nx=Ny=16, size(M)=(512,512)
# 0.021 s (24 allocations: 0.78 MiB) for Nx=Ny=8, size(M)=(128,128)
Œ± = Œ±X.values
X = Œ±X.vectors
@show Œ±[1]
proc_eigs(p,X[:,1],Œ±[1];Œîx,Œîy,Œîz,Nx,Ny,Nz)
solve_dense(p)
pÃÑ2,XÃÑ,Œ±ÃÑ = Zygote.gradient(p,X[:,1],Œ±[1]) do p,H,œâ¬≤
    proc_eigs(p,H,œâ¬≤;Œîx,Œîy,Œîz,Nx,Ny,Nz)
end
@show pÃÑ2
PÃÇ = I - X[:,1] * X[:,1]'
b = PÃÇ * XÃÑ #[1]
@show maximum(abs2.(b))
XÃÑ - X[:,1] * dot(X[:,1],XÃÑ) ‚âà b
Œª‚ÇÄ = IterativeSolvers.bicgstabl(M-Œ±[1]*I,b,3)
@show maximum(abs2.(Œª‚ÇÄ))
if isnothing(Œ±ÃÑ)
    Œ±ÃÑ = 0.
end
Œª = Œª‚ÇÄ - Œ±ÃÑ * X[:,1]
@show maximum(abs2.(Œª))
MÃÑ = -Œª * X[:,1]'
@show pÃÑ1 = M_pb(MÃÑ)[1]
if isnothing(pÃÑ2)
    pÃÑ2 = zeros(eltype(p),size(p))
end
if isnothing(pÃÑ1)
    pÃÑ1 = zeros(eltype(p),size(p))
end
@show pÃÑ = pÃÑ2 + pÃÑ1
@show pÃÑ_err = abs.(pÃÑ_FD .- pÃÑ) ./ abs.(pÃÑ_FD)
## (Œµ‚Åª¬π operator ,k) to group velocity gradient calculation with explicit matrices
println("####################################################################################")
println("")
println("(Œµ‚Åª¬π operator ,k) to group velocity gradient calculation with explicit matrices")
println("")
println("####################################################################################")
p = p0
eid, eid_pb = Zygote.pullback(x->ei_dot_rwg(x;Œîx,Œîy,Œîz,Nx,Ny,Nz),p)
# eid = ei_dot_rwg(p;Œîx,Œîy,Œîz,Nx,Ny,Nz)
M = make_M_eidot(p,eid;Œîx,Œîy,Œîz,Nx,Ny,Nz)
Œ±X = eigen(M)
Œ± = Œ±X.values
X = Œ±X.vectors
@show œâ¬≤_eidot = Œ±[1]
# @show ng_proc_eigs_eidot = proc_eigs_eidot(p,eid,X[:,1],Œ±[1];Œîx,Œîy,Œîz,Nx,Ny,Nz)
@show ng_eidot = solve_dense_eidot(p,eid;Œîx,Œîy,Œîz,Nx,Ny,Nz)
pÃÑ_pe,eiÃÑd_pe,XÃÑ,Œ±ÃÑ = Zygote.gradient(p,eid,X[:,1],Œ±[1]) do p,eidot,H,œâ¬≤
    proc_eigs_eidot(p,eidot,H,œâ¬≤;Œîx,Œîy,Œîz,Nx,Ny,Nz)
end
eiÃÑd_pe_herm = Zygote._hermitian_back(eiÃÑd_pe,eid.uplo)
@show œâÃÑsq_eidot = Œ±ÃÑ
@show pÃÑ_pe
PÃÇ = I - X[:,1] * X[:,1]'
b = PÃÇ * XÃÑ #[1]
@show maximum(abs2.(b))
XÃÑ - X[:,1] * dot(X[:,1],XÃÑ) ‚âà b
Œª‚ÇÄ = IterativeSolvers.bicgstabl(M-Œ±[1]*I,b,3)
@show maximum(abs2.(Œª‚ÇÄ))
if isnothing(Œ±ÃÑ)
    Œ±ÃÑ = 0.
end
Œª = Œª‚ÇÄ - Œ±ÃÑ * X[:,1]
@show maximum(abs2.(Œª))
MÃÑ = -Œª * X[:,1]'
kcr_c2t, ùìï‚Åª¬π, eeii, ùìï, kcr_t2c = M_components(p;Œîx,Œîy,Œîz,Nx,Ny,Nz)
# eiÃÑd1 = -ùìï * kcr_t2c * MÃÑ * kcr_c2t * ùìï‚Åª¬π # = (-kcr_c2t * ùìï‚Åª¬π)' * MÃÑ * (ùìï * kcr_t2c)'
# (-kcr_c2t * ùìï‚Åª¬π)' * MÃÑ * (ùìï * kcr_t2c)' ‚âà -ùìï * kcr_t2c * MÃÑ * kcr_c2t * ùìï‚Åª¬π
d = ùìï * kcr_t2c * X[:,1] ./ (Nx * Ny * Nz)
Œªd = ùìï * kcr_t2c * Œª
e = eid * d
eiÃÑd_eig = -Œªd * d'
eiÃÑd_eig_herm = Zygote._hermitian_back(eiÃÑd_eig,eid.uplo)
Œªe = eid * Œªd
ŒªeÃÉ = ùìï‚Åª¬π * Œªe
eÃÉ = (Nx * Ny * Nz) * ùìï‚Åª¬π * e
kcrÃÑ_t2c = -( ŒªeÃÉ * X[:,1]' + eÃÉ * Œª' )
@show maximum(abs2.(d))
@show maximum(abs2.(Œªd))
@show maximum(abs2.(e))
@show maximum(abs2.(Œªe))
kcr_t2c2, kcr_t2c_pb = Zygote.pullback(kxt2c_matrix,p)
@show pÃÑ_kcr = real(kcr_t2c_pb(kcrÃÑ_t2c)[1])
# -ùìï * kcr_t2c * MÃÑ * kcr_c2t * ùìï‚Åª¬π ‚âà -Œªd * d'
eiÃÑd = eiÃÑd_eig_herm + eiÃÑd_pe_herm
@show pÃÑ_eid = eid_pb(eiÃÑd)[1]
if isnothing(pÃÑ_pe)
    pÃÑ_pe = zeros(eltype(p),size(p))
end
if isnothing(pÃÑ_eid)
    pÃÑ_eid = zeros(eltype(p),size(p))
end
if isnothing(pÃÑ_kcr)
    pÃÑ_kcr = zeros(eltype(p),size(p))
end
@show pÃÑ = pÃÑ_eid + pÃÑ_pe + pÃÑ_kcr
@show pÃÑ_FD
@show pÃÑ_err = abs.(pÃÑ_FD .- pÃÑ) ./ abs.(pÃÑ_FD)
# eiÃÑd_5diag = diagm([diag_idx => diag(eiÃÑd,diag_idx) for diag_idx = -2:2]...)
# eiÃÑd_3diag = diagm([diag_idx => diag(eiÃÑd,diag_idx) for diag_idx = -1:1]...)
# eiÃÑd_1diag = diagm([diag_idx => diag(eiÃÑd,diag_idx) for diag_idx = 0]...)
# @assert eid_pb(eiÃÑd)[1] ‚âà eid_pb(eiÃÑd_3diag)[1]
# @show pÃÑ1_eidot = eid_pb(eiÃÑd_3diag)[1]
# @show pÃÑ1_eidot_5diag = eid_pb(eiÃÑd_5diag)[1]
# @show pÃÑ1_eidot_3diag = eid_pb(eiÃÑd_3diag)[1]
# @show pÃÑ1_eidot_1diag = eid_pb(eiÃÑd_1diag)[1]
# @show pÃÑ1_eidot_5diag_err = abs.(pÃÑ1_eidot .- pÃÑ1_eidot_5diag) ./ abs.(pÃÑ1_eidot)
# @show pÃÑ1_eidot_3diag_err = abs.(pÃÑ1_eidot .- pÃÑ1_eidot_3diag) ./ abs.(pÃÑ1_eidot)
# @show pÃÑ1_eidot_1diag_err = abs.(pÃÑ1_eidot .- pÃÑ1_eidot_1diag) ./ abs.(pÃÑ1_eidot)

# dstar = conj.(d)
# Œªdstar = conj.(Œªd)
# D0 = real( (-Œªd .* dstar)) #-Œªd .* dstar
# D1 = -Œªdstar[2:end] .* d[begin:end-1] + -Œªd[begin:end-1] .* dstar[2:end]
# D2 = -Œªdstar[3:end] .* d[begin:end-2] + -Œªd[begin:end-2] .* dstar[3:end]
# diag(eiÃÑd1_herm,0) ‚âà D0
# diag(eiÃÑd1_herm,1) ‚âà D1
# diag(eiÃÑd1_herm,2) ‚âà D2
# @show maximum(abs2.(D0))
# @show maximum(abs2.(D1))
# @show maximum(abs2.(D2))
##
println("####################################################################################")
println("")
println("(Œµ‚Åª¬π operator ,(mn(k), mag(k)) arrays) to group velocity gradient calculation with explicit matrices")
println("")
println("####################################################################################")
p = p0
eid, eid_pb = Zygote.pullback(x->ei_dot_rwg(x;Œîx,Œîy,Œîz,Nx,Ny,Nz),p)
(mag, mn), magmn_pb = Zygote.pullback(p0) do p
    calc_kpg(p[1],OptiMode.make_MG(Œîx, Œîy, Œîz, Nx, Ny, Nz).g‚Éó)
end
kxt2c, kxt2c_pb = Zygote.pullback(mag,mn) do mag,mn
    kxt2c_matrix(mag,mn)
end
@show ng,ng_pb = Zygote.pullback(solve_dense,eid,mag,mn)
eiÃÑd,maÃÑg,mnÃÑ = ng_pb(1)
@show pÃÑ_magmn = magmn_pb((real(maÃÑg),real(mnÃÑ)))[1]
@show pÃÑ_eid = eid_pb(eiÃÑd)[1]
@show pÃÑ = pÃÑ_magmn + pÃÑ_eid
@show pÃÑ_FD
@show pÃÑ_err = abs.(pÃÑ_FD .- pÃÑ) ./ abs.(pÃÑ_FD)
M = make_M(eid,mag,mn)
Œ±X = eigen(M)
Œ± = Œ±X.values
X = Œ±X.vectors
@show œâ¬≤ = Œ±[1]
@show n = sqrt(œâ¬≤) / p[1]
@show ng, pe_pb = Zygote.pullback(proc_eigs,eid,mag,mn,X[:,1],Œ±[1])
eiÃÑd_pe,maÃÑg_pe,mnÃÑ_pe,XÃÑ,Œ±ÃÑ = pe_pb(1)
@show œâÃÑsq = Œ±ÃÑ
@show maximum(abs2.(eiÃÑd_pe))
@show maximum(abs2.(maÃÑg_pe))
@show maximum(abs2.(mnÃÑ_pe))
@show size(XÃÑ)
@show maximum(abs2.(XÃÑ))
# @show maximum(real.(XÃÑ))
# @show maximum(imag.(XÃÑ))
# @show minimum(real.(XÃÑ))
# @show minimum(imag.(XÃÑ))
# solve for adjoint field, pull back through M to get pÃÑ contributions
PÃÇ = I - X[:,1] * X[:,1]'
b = PÃÇ * XÃÑ #[1]
@show maximum(abs2.(b))
# @show maximum(real.(b))
# @show maximum(imag.(b))
# @show minimum(real.(b))
# @show minimum(imag.(b))
XÃÑ - X[:,1] * dot(X[:,1],XÃÑ) ‚âà b
Œª‚ÇÄ = IterativeSolvers.bicgstabl(M-Œ±[1]*I,b,3)
@show maximum(abs2.(Œª‚ÇÄ))
# @show maximum(real.(Œª‚ÇÄ))
# @show maximum(imag.(Œª‚ÇÄ))
# @show minimum(real.(Œª‚ÇÄ))
# @show minimum(imag.(Œª‚ÇÄ))
if isnothing(Œ±ÃÑ)
    Œ±ÃÑ = 0.
end
Œª = Œª‚ÇÄ - Œ±ÃÑ * X[:,1]
@show maximum(abs2.(Œª))
# @show maximum(real.(Œª))
# @show maximum(imag.(Œª))
# @show minimum(real.(Œª))
# @show minimum(imag.(Œª))
MÃÑ = -Œª * X[:,1]'
kcr_c2t, ùìï‚Åª¬π, eeii, ùìï, kcr_t2c = M_components(p;Œîx,Œîy,Œîz,Nx,Ny,Nz)
# eiÃÑd1 = -ùìï * kcr_t2c * MÃÑ * kcr_c2t * ùìï‚Åª¬π # = (-kcr_c2t * ùìï‚Åª¬π)' * MÃÑ * (ùìï * kcr_t2c)'
# (-kcr_c2t * ùìï‚Åª¬π)' * MÃÑ * (ùìï * kcr_t2c)' ‚âà -ùìï * kcr_t2c * MÃÑ * kcr_c2t * ùìï‚Åª¬π
d = ùìï * kcr_t2c * X[:,1] ./ (Nx * Ny * Nz)
Œªd = ùìï * kcr_t2c * Œª
e = eid * d
Œªe = eid * Œªd
ŒªeÃÉ = ùìï‚Åª¬π * Œªe
eÃÉ = (Nx * Ny * Nz) * ùìï‚Åª¬π * e
kcrÃÑ_t2c = -( ŒªeÃÉ * X[:,1]' + eÃÉ * Œª' )
@show maximum(abs2.(d))
@show maximum(abs2.(Œªd))
@show maximum(abs2.(e))
@show maximum(abs2.(Œªe))
@show maximum(abs2.(eÃÉ))
@show maximum(abs2.(ŒªeÃÉ))
ŒªeÃÉ_3v = reinterpret(SVector{3,ComplexF64},ŒªeÃÉ)
eÃÉ_3v = reinterpret(SVector{3,ComplexF64},eÃÉ)
Œª_2v = reinterpret(SVector{2,ComplexF64},Œª)
H_2v = reinterpret(SVector{2,ComplexF64},X[:,1])
@show size(ŒªeÃÉ_3v)
@show size(eÃÉ_3v)
@show size(Œª_2v)
@show size(H_2v)
@show maximum(norm.(ŒªeÃÉ_3v))
@show maximum(norm.(eÃÉ_3v))
@show maximum(norm.(Œª_2v))
@show maximum(norm.(H_2v))
kxÃÑ = reshape( reinterpret(Float64, -real.( ŒªeÃÉ_3v .* adjoint.(conj.(H_2v)) + eÃÉ_3v .* adjoint.(conj.(Œª_2v)) ) ), (3,2,Nx,Ny,Nz) )
@tullio maÃÑg_eigs[ix,iy,iz] := mn[a,2,ix,iy,iz] * kxÃÑ[a,1,ix,iy,iz] - mn[a,1,ix,iy,iz] * kxÃÑ[a,2,ix,iy,iz]
mnÃÑ_signs = [-1 ; 1]
@tullio mnÃÑ_eigs[a,b,ix,iy,iz] := kxÃÑ[a,3-b,ix,iy,iz] * mag[ix,iy,iz] * mnÃÑ_signs[b] nograd=mnÃÑ_signs
@show maximum(abs2.(kxÃÑ))
@show maximum(maÃÑg_eigs)
@show maximum(mnÃÑ_eigs)
@show pÃÑ_kcr_eigs = magmn_pb((maÃÑg_eigs,mnÃÑ_eigs))[1]
eiÃÑd_eigs = -Œªd * d'
eiÃÑd_eigs_herm = Zygote._hermitian_back(eiÃÑd_eigs,eid.uplo)
eiÃÑd_pe_herm = Zygote._hermitian_back(eiÃÑd_pe,eid.uplo)
eiÃÑd_full_herm = Zygote._hermitian_back(eiÃÑd,eid.uplo)
@show pÃÑ_eid_eigs = eid_pb(eiÃÑd_eigs_herm)[1]
@show pÃÑ_eigs = pÃÑ_eid_eigs + pÃÑ_kcr_eigs



@show pÃÑ_eid_pe = eid_pb(eiÃÑd_pe_herm)[1]
@show pÃÑ_kcr_pe = magmn_pb((real(maÃÑg_pe),real(mnÃÑ_pe)))[1]
@show pÃÑ_pe = pÃÑ_eid_pe + pÃÑ_kcr_pe

if isnothing(pÃÑ_pe)
    pÃÑ_pe = zeros(eltype(p),size(p))
end
if isnothing(pÃÑ_eigs)
    pÃÑ_eigs = zeros(eltype(p),size(p))
end
@show pÃÑ = pÃÑ_eigs + pÃÑ_pe
@show pÃÑ_err = abs.(pÃÑ_FD .- pÃÑ) ./ abs.(pÃÑ_FD)


# maÃÑg_eigs_AD,mnÃÑ_eigs_AD = kxt2c_pb(kcrÃÑ_t2c)
# @assert maÃÑg_eigs ‚âà real(maÃÑg_eigs_AD)
# @assert mnÃÑ_eigs ‚âà real(mnÃÑ_eigs_AD)

# kcr_t2c2, kcr_t2c_p_pb = Zygote.pullback(kxt2c_matrix,p)
# kcr_t2c3, kcr_t2c_magmn_pb = Zygote.pullback(kxt2c_matrix,mag,mn)
# @assert kcr_t2c2 ‚âà kcr_t2c
# @assert kcr_t2c3 ‚âà kcr_t2c
# @assert make_M(eid,mag,mn) ‚âà make_M(eid,kcr_t2c)
# M,M_pb_kcr = Zygote.pullback(make_M,eid,kcr_t2c)
# M,M_pb_magmn = Zygote.pullback(make_M,eid,mag,mn)
# eiÃÑd_eigs2,maÃÑg_eigs2,mnÃÑ_eigs2 = M_pb(MÃÑ)
# eiÃÑd_kcr, kcrÃÑ_t2c1 = M_pb_kcr(MÃÑ)
# kcrÃÑ_t2c2 = ùìï‚Åª¬π * ( (eid * ùìï * kcr_t2c * MÃÑ') + (eid * ùìï * kcr_t2c * MÃÑ) )
# kcrÃÑ_t2c3 = ùìï‚Åª¬π * ( (eid * ùìï * kcr_t2c * -X[:,1] * Œª') + (eid * ùìï * kcr_t2c * -Œª * X[:,1]' ) )
# kcrÃÑ_t2c4 = ùìï‚Åª¬π * ( ( -(Nx * Ny * Nz) * e * Œª') + (-Œªe * X[:,1]' ) )
# kcrÃÑ_t2c5 =  ùìï‚Åª¬π * -( Œªe * X[:,1]' + (Nx * Ny * Nz) * e * Œª' )
# kcrÃÑ_t2c2 ‚âà kcrÃÑ_t2c1
# kcrÃÑ_t2c3 ‚âà kcrÃÑ_t2c1
# kcrÃÑ_t2c4 ‚âà kcrÃÑ_t2c1
# kcrÃÑ_t2c5 ‚âà kcrÃÑ_t2c1
# kcrÃÑ_t2c2 ./ kcrÃÑ_t2c1

# # naive Œµ‚Åª¬π_bar construction
dstar = conj.(d)
Œªdstar = conj.(Œªd)
D0 = real( (-Œªd .* dstar)) #-Œªd .* dstar
D1 = -Œªdstar[2:end] .* d[begin:end-1] + -Œªd[begin:end-1] .* dstar[2:end]
D2 = -Œªdstar[3:end] .* d[begin:end-2] + -Œªd[begin:end-2] .* dstar[3:end]
diag(eiÃÑd_eigs_herm,0) ‚âà D0
diag(eiÃÑd_eigs_herm,1) ‚âà D1
diag(eiÃÑd_eigs_herm,2) ‚âà D2
@show maximum(real.(D0))
@show maximum(real.(D1))
@show maximum(real.(D2))
@show minimum(real.(D0))
@show minimum(real.(D1))
@show minimum(real.(D2))
# # eiÃÑd = eiÃÑd_eigs_herm + eiÃÑd_pe_herm
# eiÃÑd_5diag = diagm([diag_idx => diag(eiÃÑd,diag_idx) for diag_idx = -2:2]...)
# eiÃÑd_3diag = diagm([diag_idx => diag(eiÃÑd,diag_idx) for diag_idx = -1:1]...)
# eiÃÑd_1diag = diagm([diag_idx => diag(eiÃÑd,diag_idx) for diag_idx = 0]...)
# @assert eid_pb(eiÃÑd)[1] ‚âà eid_pb(eiÃÑd_5diag)[1]
#
# @show pÃÑ_H_eigs_5diag = eid_pb(eiÃÑd_5diag)[1]
# @show pÃÑ_H_eigs_3diag = eid_pb(eiÃÑd_3diag)[1]
# @show pÃÑ_H_eigs_1diag = eid_pb(eiÃÑd_1diag)[1]
# @show pÃÑ_H_eigs_5diag_err = abs.(pÃÑ_H_eigs .- pÃÑ_H_eigs_5diag) ./ abs.(pÃÑ_H_eigs)
# @show pÃÑ_H_eigs_3diag_err = abs.(pÃÑ_H_eigs .- pÃÑ_H_eigs_3diag) ./ abs.(pÃÑ_H_eigs)
# @show pÃÑ_H_eigs_1diag_err = abs.(pÃÑ_H_eigs .- pÃÑ_H_eigs_1diag) ./ abs.(pÃÑ_H_eigs)

##
println("####################################################################################")
println("")
println("End-to-end (parameters to group velocity) gradient calculation with OptiMode (implicit operators)")
println("")
println("####################################################################################")
# Zygote.refresh()
function nngœâ_rwg_OM(p::Vector{Float64} = p0;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 128, #16,
                    Ny = 128, #16,
                    Nz = 1,
                    band_idx = 1,
                    tol = 1e-8)
                    # kz, w, t_core, Œ∏, n_core, n_subs, edge_gap = p
                    # nng_tuple = solve_nœâ(kz,ridge_wg(w,t_core,Œ∏,edge_gap,n_core,n_subs,Œîx,Œîy),Œîx,Œîy,Œîz,Nx,Ny,Nz;tol)
                    nng_tuple = solve_nœâ(p[1],ridge_wg(p[2],p[3],p[4],p[7],p[5],p[6],Œîx,Œîy),Œîx,Œîy,Œîz,Nx,Ny,Nz;tol)
                    [nng_tuple[1],nng_tuple[2]]
end
n_rwg_OM(p) = nngœâ_rwg_OM(p)[1]
ng_rwg_OM(p) = nngœâ_rwg_OM(p)[2]
# @show n_OM, n_OM_pb = Zygote.pullback(n_rwg_OM,p0)

##
@show ng_OM, ng_OM_pb = Zygote.pullback(ng_rwg_OM,p0)
@show n_OM_err = abs(n - n_OM) / n
@show ng_OM_err = abs(ng - ng_OM) / ng
@show pÃÑ_OM = real(ng_OM_pb(1)[1])
@show pÃÑ_OM_err = abs.(pÃÑ_FD .- pÃÑ_OM) ./ abs.(pÃÑ_FD)
##
println("####################################################################################")
println("")
println("End-to-end (parameters to group velocity) gradient calculation with OptiMode (implicit operators)")
println("")
println("####################################################################################")
p = p0
Œîx = 6.0
Œîy = 4.0
Œîz = 1.0
Nx = 16
Ny = 16
Nz = 1
band_idx = 1
tol = 1e-8
# s, s_pb = Zygote.pullback(p) do p
#     ridge_wg(p[2],p[3],p[4],p[7],p[5],p[6],Œîx,Œîy)
# end

(mag, mn), magmn_pb = Zygote.pullback(p0) do p
    calc_kpg(p[1],make_MG(Œîx, Œîy, Œîz, Nx, Ny, Nz).g‚Éó)
end

eid,eid_pb = Zygote.pullback(p) do p
    shapes = ridge_wg(p[2],p[3],p[4],p[7],p[5],p[6],Œîx,Œîy)
    make_Œµ‚Çõ‚Åª¬π(shapes,make_MG(Œîx,Œîy,Œîz,Nx,Ny,Nz))
    # Œµ‚Çõ‚Åª¬π(s,make_MG(Œîx,Œîy,Œîz,Nx,Ny,Nz))
end

(H,œâ¬≤), eigs_pb = Zygote.pullback(p,eid) do p,eid
    solve_œâ¬≤(p[1],eid,Œîx,Œîy,Œîz;neigs=1,eigind=1,maxiter=3000,tol)
end

ng, ng_pb = Zygote.pullback(H,œâ¬≤,eid,mag,mn) do H,œâ¬≤,eid,mag,mn
    Ha = reshape(H,(2,Nx,Ny,Nz))
    ‚àöœâ¬≤ / real( dot(H, -vec( kx_c2t( ifft( Œµ‚Åª¬π_dot( fft( zx_t2c(Ha,mn), (2:4) ), eid), (2:4)),mn,mag) ) ) )
end

# ng_OM, ng_pb = Zygote.pullback(p,eid) do p,eid
#     solve_nœâ(p[1],eid,Œîx,Œîy,Œîz,Nx,Ny,Nz;tol)[2]
# end
# pÃÑ_ng, eid_bar = ng_pb(1)

HÃÑ_ng,omsÃÑq_ng,eiÃÑd_ng,maÃÑg_ng,mnÃÑ_ng = ng_pb(1)
pÃÑ_eigs, eiÃÑd_eigs = eigs_pb((HÃÑ_ng, omsÃÑq_ng))
@show pÃÑ_eigs
@show pÃÑ_eid_eigs = eid_pb(eiÃÑd_eigs)[1]
@show pÃÑ_eid_ng = eid_pb(eiÃÑd_ng)[1]
@show pÃÑ_magmn_ng = magmn_pb((maÃÑg_ng,mnÃÑ_ng))[1]

eiÃÑ_eigs_OM = eiÃÑd_eigs
pÃÑ_eid_eigs_OM = pÃÑ_eid_eigs

@show pÃÑ = real(pÃÑ_magmn_ng + pÃÑ_eigs + pÃÑ_eid_eigs + pÃÑ_eid_ng)
@show pÃÑ_err = abs.(pÃÑ_FD .- pÃÑ) ./ abs.(pÃÑ_FD)

##
using ArrayInterface, LoopVectorization
function ei_f2m1(ei_field,Nx,Ny,Nz)
    ei_matrix_buf = Zygote.bufferfrom(zeros(ComplexF64,(3*Nx*Ny*Nz),(3*Nx*Ny*Nz)))
    for i=1:Nx,j=1:Ny,a=1:3,b=1:3
        q = (Ny * (j-1) + i)
        ei_matrix_buf[(3*q-2)+a-1,(3*q-2)+b-1] = ei_field[a,b,i,j,1]
    end
    # return copy(ei_matrix_buf)
    return Hermitian(copy(ei_matrix_buf))
end

function ei_f2m2(ei_field,Nx,Ny,Nz)
    ei_matrix_buf = Zygote.bufferfrom(zeros(ComplexF64,(3*Nx*Ny*Nz),(3*Nx*Ny*Nz)))
    for i=1:Nx,j=1:Ny,a=1:3,b=1:3
        q = (Ny * (j-1) + i)
        ei_matrix_buf[(3*q-2)+a-1,(3*q-2)+b-1] = ei_field[a,b,i,j,1]
    end
    # return copy(ei_matrix_buf)
    return copy(ei_matrix_buf)
end

function ei_m2f1(ei_matrix,Nx,Ny,Nz)
    ei_field = zeros(Float64,(3,3,Nx,Ny,Nz))
    D0 = diag(ei_matrix,0)
    D1 = diag(ei_matrix,1)
    D2 = diag(ei_matrix,2)
    for i=1:Nx,j=1:Ny,k=1:Nz #,a=1:3,b=1:3
        q = (Nz * (k-1) + Ny * (j-1) + i) # (Ny * (j-1) + i)
        ei_field[1,1,i,j,k] = real(D0[3*q-2])
        ei_field[2,2,i,j,k] = real(D0[3*q-1] )
        ei_field[3,3,i,j,k] = real(D0[3*q])
        ei_field[1,2,i,j,k] = real(D1[3*q-2])
        ei_field[2,1,i,j,k] = real(conj(D1[3*q-2]))
        ei_field[2,3,i,j,k] = real(D1[3*q-1])
        ei_field[3,2,i,j,k] = real(conj(D1[3*q-1]))
        ei_field[1,3,i,j,k] = real(D2[3*q-2])
        ei_field[3,1,i,j,k] = real(conj(D2[3*q-2]))
        # ei_matrix[(3*q-2)+a-1,(3*q-2)+b-1] = ei_field[a,b,i,j,1]
    end
    return ei_field
end

function ei_m2f3(ei_matrix,Nx,Ny,Nz)
    ei_field = zeros(Float64,(3,3,Nx,Ny,Nz))
    @avx for a=1:3,b=1:3,k=1:Nz,j=1:Ny,i=1:Nx
        q = (Nz * (k-1) + Ny * (j-1) + i) # (Ny * (j-1) + i)
        ei_field[a,b,i,j,k] = ei_matrix[(3*q-2)+a-1,(3*q-2)+b-1]
    end
    return ei_field
end

function ei_m2f4(d,Œªd,Nx,Ny,Nz)
    # ei_field = Hermitian(zeros(Float64,(3,3,Nx,Ny,Nz)),"U")
    ei_field = zeros(Float64,(3,3,Nx,Ny,Nz))
    @avx for k=1:Nz,j=1:Ny,i=1:Nx
        q = (Nz * (k-1) + Ny * (j-1) + i) # (Ny * (j-1) + i)
        for a=1:3 # loop over diagonals
            ei_field[a,a,i,j,k] = real( -Œªd[3*q-2+a-1] * conj(d[3*q-2+a-1]) )
        end
        for a2=1:2 # loop over first off diagonal
            ei_field[a2,a2+1,i,j,k] = real( -conj(Œªd[3*q-2+a2]) * d[3*q-2+a2-1] - Œªd[3*q-2+a2-1] * conj(d[3*q-2+a2]) )
            ei_field[a2+1,a2,i,j,k] = ei_field[a2,a2+1,i,j,k]  # D1[3*q-2]
        end
        # a = 1, set 1,3 and 3,1, second off-diagonal
        ei_field[1,3,i,j,k] = real( -conj(Œªd[3*q]) * d[3*q-2] - Œªd[3*q-2] * conj(d[3*q]) )
        ei_field[3,1,i,j,k] =  ei_field[1,3,i,j,k]
    end
    return ei_field
end

##

eid_ref, eid_ref_pb = Zygote.pullback(x->ei_dot_rwg(x;Œîx,Œîy,Œîz,Nx,Ny,Nz),p)
eiÃÑd_eigs = -Œªd * d'
eiÃÑd_eigs_herm = Zygote._hermitian_back(eiÃÑd_eigs,eid_ref.uplo)
@show pÃÑ_eid_eigs_ref = eid_ref_pb(eiÃÑd_eigs_herm)[1]

@show pÃÑ_eid_eigs_OM
eiÃÑd_eigs_OM1 = ei_f2m1(eiÃÑ_eigs_OM,Nx,Ny,Nz)
eiÃÑd_eigs_OM2 = ei_f2m2(eiÃÑ_eigs_OM,Nx,Ny,Nz)
eiÃÑd_eigs_OM3 = Zygote._hermitian_back(ei_f2m1(eiÃÑ_eigs_OM,Nx,Ny,Nz),eid_ref.uplo)
eiÃÑd_eigs_OM4 = Zygote._hermitian_back(ei_f2m2(eiÃÑ_eigs_OM,Nx,Ny,Nz),eid_ref.uplo)
@show pÃÑ_eid_eigs_OM1 = eid_ref_pb(eiÃÑd_eigs_OM1)[1]
@show pÃÑ_eid_eigs_OM2 = eid_ref_pb(eiÃÑd_eigs_OM2)[1]
@show pÃÑ_eid_eigs_OM3 = eid_ref_pb(eiÃÑd_eigs_OM3)[1]
@show pÃÑ_eid_eigs_OM4 = eid_ref_pb(eiÃÑd_eigs_OM4)[1]

##
xlim=(320,520)
dind = 1
plt = plot(real(diag(eiÃÑd_eigs_herm,dind)),label="ref_r",lw=3,alpha=0.5,xlim=xlim)
# plot!(imag(diag(eiÃÑd_eigs_herm,dind)),label="ref_i",lw=3,alpha=0.5,) #,xlim=xlim)
plot!(real(diag(eiÃÑd_eigs_OM4,dind)),label="OM4_r",ls=:dash)
# plot!(imag(diag(eiÃÑd_eigs_OM4,dind)),label="OM4_i",ls=:dash)
plot!(real(diag(eiÃÑd_eigs_OM2,dind)),label="OM2_r",ls=:dash)
# plot!(imag(diag(eiÃÑd_eigs_OM2,dind)),label="OM2_i",ls=:dash)

##
eiÃÑd_eigs_OM = ei_field2matrix(eiÃÑd_eigs,Nx,Ny,Nz)
eiÃÑd_eigs_OM_herm = Zygote._hermitian_back(eiÃÑd_eigs_OM,eiÃÑd_eigs_OM.uplo)
@show pÃÑ_eid_eigs2 = eid_ref_pb(eiÃÑd_eigs_OM)[1]
@show pÃÑ_eid_eigs3 = eid_ref_pb(eiÃÑd_eigs_OM_herm)[1]
eiÃÑd_eigs_OM ‚âà eiÃÑd_eigs_herm
@show diag(eiÃÑd_eigs_OM,0)./diag(eiÃÑd_eigs_herm,0)
@show diag(eiÃÑd_eigs_OM,1)./diag(eiÃÑd_eigs_herm,1)
@show diag(eiÃÑd_eigs_OM,-1)./diag(eiÃÑd_eigs_herm,-1)
eiÃÑd_eigs ‚âà eiÃÑ_eigs_herm

##
ng_OM_pb(1)

##
using Revise
using ChainRules, Zygote, FiniteDifferences, OptiMode
p0 = [
    1.47,               #   propagation constant    `kz`            [Œºm‚Åª¬π]
    1.5,                #   top ridge width         `w_top`         [Œºm]
    0.7,                #   ridge thickness         `t_core`        [Œºm]
    œÄ / 10.0,           #   ridge sidewall angle    `Œ∏`             [radian]
    2.4,                #   core index              `n_core`        [1]
    1.4,                #   substrate index         `n_subs`        [1]
    0.5,                #   vacuum gap at boundaries `edge_gap`     [Œºm]
]

function nngœâ_rwg_OM(p::Vector{Float64} = p0;
                    Œîx = 6.0,
                    Œîy = 4.0,
                    Œîz = 1.0,
                    Nx = 64,
                    Ny = 64,
                    Nz = 1,
                    band_idx = 1,
                    tol = 1e-8)
                    # kz, w, t_core, Œ∏, n_core, n_subs, edge_gap = p
                    # nng_tuple = solve_nœâ(kz,ridge_wg(w,t_core,Œ∏,edge_gap,n_core,n_subs,Œîx,Œîy),Œîx,Œîy,Œîz,Nx,Ny,Nz;tol)
                    nng_tuple = solve_nœâ(p[1],ridge_wg(p[2],p[3],p[4],p[7],p[5],p[6],Œîx,Œîy),Œîx,Œîy,Œîz,Nx,Ny,Nz;tol)
                    [nng_tuple[1],nng_tuple[2]]
end

nngœâ_rwg_OM(p0)




real(Zygote.gradient(x->nngœâ_rwg_OM(x)[1],p0)[1])








real(Zygote.gradient(x->nngœâ_rwg_OM(x)[2],p0)[1])








FiniteDifferences.jacobian(central_fdm(3,1),x->nngœâ_rwg_OM(x),p0)[1]'

## Calculate ng and gradient by hand

# params
p = p0
Œîx = 6.0
Œîy = 4.0
Œîz = 1.0
Nx = 128
Ny = 128
Nz = 1
band_idx = 1
tol = 1e-8

# fwd pass
Œµ‚Åª¬π, Œµ‚Åª¬π_pb = Zygote.pullback(p) do p
     make_Œµ‚Çõ‚Åª¬π(ridge_wg(p[2],p[3],p[4],p[7],p[5],p[6],Œîx,Œîy), make_MG(Œîx,Œîy,Œîz,Nx,Ny,Nz))  # MaxwellGrid(Œîx,Œîy,Œîz,Nx,Ny,Nz))
end

Hœâ¬≤,Hœâ¬≤_pb = Zygote.pullback(p,Œµ‚Åª¬π) do p,Œµ‚Åª¬π
    solve_œâ¬≤(p[1],Œµ‚Åª¬π,Œîx,Œîy,Œîz;neigs=1,eigind=1,maxiter=3000,tol)
end

H = Hœâ¬≤[1][:,1]
œâ¬≤ = Hœâ¬≤[2]

mag_mn, mag_mn_pb = Zygote.pullback(p) do p
    # calc_kpg(p[1],Œîx,Œîy,Œîz,Nx,Ny,Nz)
    g‚Éó = Zygote.@ignore([ [gx;gy;gz] for gx in collect(fftfreq(Nx,Nx/Œîx)), gy in collect(fftfreq(Ny,Ny/Œîy)), gz in collect(fftfreq(Nz,Nz/Œîz))])
    calc_kpg(p[1],Zygote.dropgrad(g‚Éó))
end

kpg_mag, mn = mag_mn

MkH, MkH_pb = Zygote.pullback(M‚Çñ,H,Œµ‚Åª¬π,mn,kpg_mag)

ng, ng_pb = Zygote.pullback(H,MkH,œâ¬≤) do H,MkH,œâ¬≤
    -sqrt(œâ¬≤) / real(dot(H,MkH))
end

# reverse pass
HÃÑ_ng, MkÃÑH_ng, œâsÃÑq_ng = ng_pb(1)
HÃÑ_MkH, eiÃÑ_MkH, mnÃÑ_MkH, magÃÑ_MkH = MkH_pb(MkÃÑH_ng)
pÃÑ_mnmag = mag_mn_pb((magÃÑ_MkH,mnÃÑ_MkH))[1]
pÃÑ_mnmag = mag_mn_pb((magÃÑ_MkH,nothing))[1]
pÃÑ_Hœâ¬≤, eiÃÑ_Hœâ¬≤ = Hœâ¬≤_pb(( HÃÑ_MkH + HÃÑ_ng , œâsÃÑq_ng ))
pÃÑ_Œµ‚Åª¬π = Œµ‚Åª¬π_pb( eiÃÑ_Hœâ¬≤ + eiÃÑ_MkH )[1]
pÃÑ = pÃÑ_Œµ‚Åª¬π + pÃÑ_Hœâ¬≤ + real(pÃÑ_mnmag)


function f_kpg(p)
    # g‚Éó = Zygote.@ignore( [ [gx;gy;gz] for gx in collect(fftfreq(Nx,Nx/Œîx)), gy in collect(fftfreq(Ny,Ny/Œîy)), gz in collect(fftfreq(Nz,Nz/Œîz))] )
    g‚Éó = [ [gx;gy;gz] for gx in fftfreq(Nx,Nx/Œîx), gy in fftfreq(Ny,Ny/Œîy), gz in fftfreq(Nz,Nz/Œîz)]
    kpg_mag, mn = calc_kpg(p[1],Zygote.dropgrad(g‚Éó))
    # sum(abs2,mn[3,:,:,:])
    sum(kpg_mag)
end
f_kpg(p0)
f_kpg([1.85,1.7,0.7,0.2243994752564138,2.4,1.4,0.5])

gradient(f_kpg,p0)
FiniteDifferences.jacobian(central_fdm(3,1),f_kpg,p0)[1][1,:]


##





nngœâ_rwg_OM(p0)

FiniteDifferences.jacobian(central_fdm(3,1),x->nngœâ_rwg_OM(x),p0)[1]'








real(Zygote.gradient(x->nngœâ_rwg_OM(x)[1],p0)[1])








Zygote.gradient(x->nngœâ_rwg_OM(x)[2],p0)[1]


Zygote.refresh()

##

## configure swept-parameter data collection
ws = collect(0.8:0.1:1.7)
ts = collect(0.5:0.1:1.3)

@show nw = length(ws)
@show nt = length(ts)
np = length(p0)

pÃÑ_AD = zeros(Float64,(nw,nt,np))
pÃÑ_FD = zeros(Float64,(nw,nt,np))
pÃÑ_SJ = zeros(Float64,(nw,nt,np))

for wind in 1:nw
    for tind in 1:nt
        ww = ws[wind]
        tt = ts[tind]
        pp = copy(p0)
        pp[2] = ww
        pp[3] = tt
        pÃÑ_AD[wind,tind,:] = Zygote.gradient(solve_dense,pp)[1]
        pÃÑ_FD[wind,tind,:] = FiniteDifferences.grad(central_fdm(2, 1),solve_dense,pp)[1]
        pÃÑ_SJ[wind,tind,:] = ‚àÇsolve_dense_SJ(pp)
    end
end

## collect parameter sweeps

using HDF5, Dates
function write_sweep(sw_name;
                    data_dir="/home/dodd/data/OptiMode/grad_ng_p_rwg_dense/",
                    dt_fmt=dateformat"Y-m-d--H-M-S",
                    extension=".h5",
                    kwargs...)
    timestamp = Dates.format(now(),dt_fmt)
    fname = sw_name * "_" *  timestamp * extension
    @show fpath = data_dir * fname
    h5open(fpath, "cw") do file
        for (data_name,data) in kwargs
            write(file, string(data_name), data)
        end
    end
    return fpath
end

function read_sweep(sw_name;
                    data_dir="/home/dodd/data/OptiMode/grad_ng_p_rwg_dense/",
                    dt_fmt=dateformat"Y-m-d--H-M-S",
                    extension=".h5",
                    sw_keys=["ws","ts","p0","pÃÑ_AD","pÃÑ_FD","pÃÑ_SJ"]
                    )
    # choose most recently timestamped file matching sw_name tag and extension
    fname = sort(  filter(x->(prod(split(x,"_")[begin:end-1])==prod(split(sw_name,"_"))),
                        readdir(data_dir));
                by=file->DateTime(split(file[begin:end-length(extension)],"_")[end],dt_fmt)
            )[end]
    @show fpath = data_dir * fname
    ds_data = h5open(fpath, "r") do file
        @show ds_keys = keys(file)
        ds_data = Dict([k=>read(file,k) for k in sw_keys]...)
    end
    return ds_data
end

fpath_test = write_sweep("wt";ws,ts,p0,pÃÑ_AD,pÃÑ_FD,pÃÑ_SJ)
ds_test = read_sweep("wt")



##  plot data from parameter sweeps
#pÃÑ_AD
zlabels = [ "‚àÇng/‚àÇk [Œºm]", "‚àÇng/‚àÇw [Œºm‚Åª¬π]", "‚àÇng/‚àÇt [Œºm‚Åª¬π]", "‚àÇng/‚àÇŒ∏ [rad‚Åª¬π]", "‚àÇng/‚àÇncore", "‚àÇng/‚àÇnsubs]", "‚àÇng/‚àÇedge_gap [Œºm‚Åª¬π]"]8
#surface(ts,ws,pÃÑ_AD[:,:,3],xlabel="t [Œºm]",ylabel="w [Œºm]",zlabel="‚àÇng/‚àÇt [Œºm‚Åª¬π]")
plt_pÃÑ_AD = [ surface(pÃÑ_AD[:,:,ind],xlabel="t [Œºm]",ylabel="w [Œºm]",zlabel=zlabels[ind]) for ind=1:np ]
plt_pÃÑ_FD = [ surface(pÃÑ_FD[:,:,ind],xlabel="t [Œºm]",ylabel="w [Œºm]",zlabel=zlabels[ind]) for ind=1:np ]
plt_pÃÑ_SJ = [ surface(pÃÑ_SJ[:,:,ind],xlabel="t [Œºm]",ylabel="w [Œºm]",zlabel=zlabels[ind]) for ind=1:np ]
plt_pÃÑs = [plt_pÃÑ_AD  ,  plt_pÃÑ_FD , plt_pÃÑ_SJ]
plt_pÃÑ = [ plt_pÃÑs[j][ind] for j=1:3,ind=1:np ] #vcat(plt_pÃÑ_AD,plt_pÃÑ_SJ,plt_pÃÑ_FD)
l = @layout [   a   b   c
                d   e   f
                g   h   i
                j   k   l
                m   n   o
                p   q   r
                s   t   u  ]

p = plot(vec(plt_pÃÑ)..., layout = l, size=(2000,1200))

##
pÃÑ_AD = Zygote.gradient(solve_dense,p0)[1]
pÃÑ_FD = FiniteDifferences.grad(central_fdm(2, 1),solve_dense,p0)[1]
pÃÑ_SJ = ‚àÇsolve_dense_SJ(p0)

using Plots: plot, plot!, scatter, scatter!
pp = plot([-maximum(abs.(pÃÑ_AD)),maximum(abs.(pÃÑ_AD))],[-maximum(abs.(pÃÑ_AD)),maximum(abs.(pÃÑ_AD))],c=:black,label="y=x",legend=:bottomright)
scatter!(pÃÑ_AD,pÃÑ_FD,label="AD/FD")
scatter!(pÃÑ_AD,pÃÑ_SJ,label="AD/SJ")

œâ¬≤ = real.(Œ±)
plot(œâ¬≤,label="œâ¬≤",legend=:topleft)
œâ = sqrt.(œâ¬≤)
neff = kz ./ œâ
eig_ind = 1
H = reshape(X[:,eig_ind],(size(X,1),1))
plt_neff = plot(neff,label="neff",legend=:topright)
scatter!(plt_neff,neff[1:10],label="neff",legend=:topright)
grid = OptiMode.make_MG(Œîx, Œîy, Œîz, Nx, Ny, Nz)
shapes = ridge_wg(w,t_core,edge_gap,n_core,n_subs,Œîx,Œîy)
ei_field = make_Œµ‚Çõ‚Åª¬π(shapes,grid)
plot_Œµ(ei_field,grid.x,grid.y) #;cmap=cgrad(:viridis))
plot_d‚Éó(H,kz,grid)


df_p_8x8 = DataFrame(   p = p,
                        pÃÑ_AD = pÃÑ_AD,
                        pÃÑ_FD = pÃÑ_FD,
                        pÃÑ_SJ = pÃÑ_SJ,
                    )
name="M_entry_grads_rwg_8x8"
path="/home/dodd/github/OptiMode/test/"
CSV.write(*(path,name,".csv"), df_p_8x8)


#
#
# using Zygote: @adjoint
# @adjoint (T::Type{<:SArray})(xs::Number...) = T(xs...), dv -> (nothing, dv...)
# @adjoint (T::Type{<:SArray})(x::AbstractArray) = T(x), dv -> (nothing, dv)
# @adjoint (T::Type{<:SMatrix})(xs::Number...) = T(xs...), dv -> (nothing, dv...)
# @adjoint (T::Type{<:SMatrix})(x::AbstractMatrix) = T(x), dv -> (nothing, dv)
# @adjoint (T::Type{<:SVector})(xs::Number...) = T(xs...), dv -> (nothing, dv...)
# @adjoint (T::Type{<:SVector})(x::AbstractVector) = T(x), dv -> (nothing, dv)
# Zygote.refresh()


# pÃÑ_AD = [Zygote.gradient(solve_dense,p)[1][begin:end-4]...]
# pÃÑ_FD = FiniteDifferences.grad(central_fdm(2, 1),solve_dense,p)[1][begin:end-4]
# pÃÑ_SJ = [‚àÇsolve_dense_SJ(p,Œ±,X,Œ±ÃÑ,XÃÑ)[begin:end-4]...]

##


# heatmap(real(kxt2c))
# heatmap(imag(kxt2c))
# heatmap(real(F))
# heatmap(imag(F))
# heatmap(real(einv))
# heatmap(imag(einv))
# heatmap(real(Finv))
# heatmap(imag(Finv))
# heatmap(real(kxc2t))
# heatmap(imag(kxc2t))
# heatmap(real(M))
# heatmap(imag(M))
# kxt2c_op * ds.H‚Éó[:,1]
# einÃÑv = (-kxc2t * Finv)' * MÃÑ * (F * kxt2c)'
# heatmap(real(einÃÑv))
# heatmap(imag(einÃÑv))

##















using StaticArrays
ei = make_Œµ‚Çõ‚Åª¬π( ridge_wg(p0[2],p0[3],p0[4],p0[7],p0[5],p0[6],6.0,4.0), make_MG(6.,4.,1.,64,64,1) )
eiH = HybridArray{Tuple{3,3,StaticArrays.Dynamic(),StaticArrays.Dynamic(),StaticArrays.Dynamic()}}(ei)
eis1 = [ SMatrix{3,3,Float64,9}(ei[:,:,Ixyz]) for Ixyz in CartesianIndices(size(ei)[3:5]) ]
eish1 = [ SHermitianCompact{3,Float64,6}(ei[:,:,Ixyz]) for Ixyz in CartesianIndices(size(ei)[3:5]) ]

ei[:,:,42,32,1]



eir = reshape(ei,(9,64,64,1))
eir[:,42,32,1]









eis2 = reinterpret(reshape,SMatrix{3,3,Float64,9},eir)

eis1 ‚âà eis2
eis2[42,32,1]




eish1 = [ SHermitianCompact{3,Float64,6}(ei[:,:,Ixyz]) for Ixyz in CartesianIndices(size(ei)[3:5]) ]
eis1r = reinterpret(Float64,eis1)
eish1r = reinterpret(Float64,eish1)

eis1rr = reinterpret(reshape,SMatrix{3,3,Float64,9},eis1r)

SMatrix{3,3,Float64,9}(ei[:,:,42,32,1])

reinterpret(SMatrix{3,3,Float64,9},ei)



































##

@btime ei_field2matrix($ei,$Nx,$Ny,$Nz) # 534.711 Œºs (3 allocations: 9.00 MiB)
@btime ei_matrix2field($eid,$Nx,$Ny,$Nz) # 11.129 Œºs (6 allocations: 54.50 KiB)
@btime ei_matrix2field2($(real(eid)),$Nx,$Ny,$Nz) # 9.772 Œºs (6 allocations: 36.50 KiB)
@btime ei_matrix2field3($(real(eid)),$Nx,$Ny,$Nz) # 5.862 Œºs (3 allocations: 18.12 KiB)
@btime ei_matrix2field4($d,$Œªd,$Nx,$Ny,$Nz) # 2.702 Œºs (3 allocations: 18.12 KiB)
# eiÃÑd1_L, eiÃÑd1_U, eiÃÑd1_rD = LowerTriangular(eiÃÑd1), UpperTriangular(eiÃÑd1), real.(Diagonal(eiÃÑd1))
# eiÃÑd1_Herm = eiÃÑd1_U .+ eiÃÑd1_L' - eiÃÑd1_rD
  # return uplo == 'U' ? U .+ L' - rD : L .+ U' - rD
# eiÃÑd1 = transpose(-kcr_c2t * ùìï‚Åª¬π) * MÃÑ * transpose(ùìï * kcr_t2c)
if isnothing(eiÃÑd2)
    eiÃÑd2 = zeros(eltype(eiÃÑd1),size(eiÃÑd1))
end

# eiÃÑd2_L, eiÃÑd2_U, eiÃÑd2_rD = LowerTriangular(eiÃÑd2), UpperTriangular(eiÃÑd2), real.(Diagonal(eiÃÑd2))
# eiÃÑd2_Herm = eiÃÑd2_U .+ eiÃÑd2_L' - eiÃÑd2_rD

eiÃÑd_tot1 = Zygote._hermitian_back(eiÃÑd1,eid.uplo) + Zygote._hermitian_back(eiÃÑd2,eid.uplo) #eiÃÑd1 + eiÃÑd2
eiÃÑd_tot2 = Zygote._hermitian_back(Zygote.gradient(solve_dense_eidot,p,eid::Hermitian)[2],eid.uplo)
eiÃÑd_tot3 = Zygote._hermitian_back(eiÃÑd1+eiÃÑd2,eid.uplo) # eiÃÑd1_Herm + eiÃÑd2_Herm

##
plt = plot(real(diag(eiÃÑd_tot1,-1)),
                xlim=(280,520),
                c=:black,
                label="d-1,SJ_tot",
                legend=:bottomright,
                lw=2,
                alpha=0.5,
                )
plot!(real(diag(eiÃÑd_tot1,1)),
                c=:orange,
                label="d1,SJ_tot",
                lw=2,
                alpha=0.5,
                )
plot!(real(diag(eiÃÑd_tot2,-1)),c=:red,label="d-1,AD" )
plot!(real(diag(eiÃÑd_tot2,1)),c=:blue,label="d1,AD" )
plot!(real(diag(eiÃÑd_tot3,-1)),c=:green,label="d-1,SJHerm" )
plot!(real(diag(eiÃÑd_tot3,1)),c=:magenta,label="d1,SJHerm" )
##
plt = plot(real(diag(eiÃÑd_tot1,1))+real(diag(eiÃÑd_tot1,-1)),
                xlim=(280,520),
                c=:black,
                label="d-1,SJ_tot",
                legend=:bottomright,
                lw=2,
                alpha=0.5,
                )
plot!(real(diag(eiÃÑd_tot2,1))+real(diag(eiÃÑd_tot2,-1)) )
plot!(real(diag(eiÃÑd_tot3,1))+real(diag(eiÃÑd_tot3,-1)),ls=:dash,color=:green )
##
plt = plot(real(diag(eiÃÑd_tot1,1))+real(diag(eiÃÑd_tot1,-1)),
                xlim=(280,520),
                c=:black,
                label="d-1+d1,SJ_tot",
                legend=:bottomright,
                lw=2,
                alpha=0.5,
                )
plot!(real(diag(eiÃÑd1,1))+real(diag(eiÃÑd1,-1)) )
plot!((real(diag(eiÃÑd2,1))+real(diag(eiÃÑd2,-1))) )
plot!((real(diag(eiÃÑd1,1))+real(diag(eiÃÑd1,-1))) - (real(diag(eiÃÑd2,1))+real(diag(eiÃÑd2,-1))) )
plot!(real(diag(eiÃÑd_tot2,1))+real(diag(eiÃÑd_tot2,-1)) )


##
plt = plot(real(diag(eiÃÑd1,-1)),xlim=(280,520))
plot!(real(diag(eiÃÑd1,1)) )
# plot!(real(diag(eiÃÑd2,-1)) )
# plot!(real(diag(eiÃÑd2,1)) )
plot!(real(diag(eiÃÑd_tot2,-1)) )
plot!(real(diag(eiÃÑd_tot2,1)) )
plot!(real(diag(eiÃÑd_tot2,1))+real(diag(eiÃÑd_tot2,-1)) )

##
plt = plot(real(diag(eiÃÑd_tot1,0)),
                xlim=(280,520),
                c=:black,
                label="d0,SJ_tot",
                legend=:bottomright,
                lw=3,
                alpha=0.5,
                )
plot!(real(diag(eiÃÑd1,0)),c=:red,label="d0,SJ1")
plot!(real(diag(eiÃÑd2,0)),c=:blue,label="d0,SJ2")
plot!(real(diag(eiÃÑd_tot2,0)),c=:green,label="d0,AD_tot")
##

plt = plot(imag(diag(eiÃÑd1,-1)),xlim=(280,520))
plot!(imag(diag(eiÃÑd1,1)) )
plot!(imag(diag(eiÃÑd2,-1)) )
plot!(imag(diag(eiÃÑd2,1)) )
plot!(imag(diag(eiÃÑd_tot2,-1)) )
plot!(imag(diag(eiÃÑd_tot2,1)) )


@assert solve_dense_eidot(p,eid;Œîx,Œîy,Œîz,Nx,Ny,Nz) ‚âà solve_dense(p;Œîx,Œîy,Œîz,Nx,Ny,Nz)
eiÃÑd_tot1 ‚âà eiÃÑd_tot2
real(diag(eiÃÑd_tot1,0)) ‚âà real(diag(eiÃÑd_tot2,0))
real(diag(eiÃÑd_tot1,1)) ‚âà real(diag(eiÃÑd_tot2,1))
real(diag(eiÃÑd_tot1,-1)) ‚âà real(diag(eiÃÑd_tot2,-1))
real(diag(eiÃÑd_tot1,-1)) ‚âà -real(diag(eiÃÑd_tot2,1))

eiÃÑdot1 ‚âà eiÃÑdot2
real(diag(eiÃÑdot1,0)) ‚âà real(diag(eiÃÑdot2,0))
real(diag(eiÃÑdot1,1)) ‚âà real(diag(eiÃÑdot2,1))

real(diag(eiÃÑdot3,0)) ‚âà real(diag(eiÃÑdot2,0))
real(diag(eiÃÑdot3,1)) ‚âà real(diag(eiÃÑdot2,1))
real(diag(eiÃÑdot3,1)) ‚âà real(diag(eiÃÑdot1,1))

real(diag(eiÃÑdot3,2)) ‚âà real(diag(eiÃÑdot3,-2))
real(diag(eiÃÑdot2,2)) ‚âà real(diag(eiÃÑdot2,-2))
real(diag(eiÃÑdot2,1)) ‚âà real(diag(eiÃÑdot2,-1))
# heatmap(real(einÃÑv))
# heatmap(imag(einÃÑv))
##
function compare_eiÃÑdot(diagind;figsize=(800,800),xlims=(300,525))
        plt_comp_r = plot(
                                real(diag(eiÃÑdot2,diagind)),
                                xlim=xlims,
                                c=:red,
                                linewidth=3,
                                label="eiÃÑ1rd$diagind",
                        )
        plot!(real(diag(eiÃÑdot1,-diagind)),
                                xlim=xlims,
                                c=:purple,
                                linewidth=3,
                                label="eiÃÑ1rd-$diagind",
                                )
        plot!(real(diag(eiÃÑdot3,diagind)),
                                xlim=xlims,
                                c=:black,
                                linewidth=1,
                                linestyle=:dash,
                                label="eiÃÑ3rd$diagind",
                                )
        plot!(real(diag(eiÃÑdot3,-diagind)),
                                xlim=xlims,
                                c=:orange,
                                linewidth=1,
                                linestyle=:dash,
                                label="eiÃÑ3rd-$diagind",
                                )

        plt_comp_i = plot(imag(diag(eiÃÑdot2,diagind)),
                                xlim=xlims,
                                c=:blue,
                                linewidth=3,
                                label="eiÃÑ1id$diagind",
                                )
        plot!(imag(diag(eiÃÑdot1,-diagind)),
                                xlim=xlims,
                                c=:green,
                                linewidth=3,
                                label="eiÃÑ1id-$diagind",
                                )
        plot!(imag(diag(eiÃÑdot3,diagind)),
                                xlim=xlims,
                                linewidth=1,
                                c=:black,
                                linestyle=:dash,
                                label="eiÃÑ3id$diagind",
                                )
        plot!(imag(diag(eiÃÑdot3,-diagind)),
                                xlim=xlims,
                                linewidth=1,
                                c=:orange,
                                linestyle=:dash,
                                label="eiÃÑ3id-$diagind",
                                )
    l = @layout [   a
                    b   ]
    plot(plt_comp_r,
        plt_comp_i,
        layout=l,
        size=figsize,
        )
end

compare_eiÃÑdot(1;figsize=(800,800),xlims=(340,380))



##




##

# function A_from_p(p)
#     N = Int(sqrt(length(p)))
#     A0 = Zygote.Buffer(zeros(ComplexF64,(N,N)))
#     for i = 1:N
#         for j=1:i
#             A0[j,i] = p[(sum(1:(i-1))+1)+j-1]
#             # println("ind: $((sum(1:(i-1))+1)+j -1)")
#         end
#     end
#     for i = 2:N
#         for j=1:i-1
#             A0[j,i] += p[ ((sum(1:N)) + (sum(1:(i-2))+1) + j -1) ]*im
#             # println("ind: $((sum(1:N)) + (sum(1:(i-1))+1) + j -1)")
#         end
#     end
#     A = Hermitian(copy(A0))
# end

# function A_from_p_RD(p)
#     N = Int(sqrt(length(p)))
#     A0 = zeros(ComplexF64,(N,N)) # Zygote.Buffer(zeros(ComplexF64,(N,N)))
#     for i = 1:N
#         for j=1:i
#             A0[j,i] = p[(sum(1:(i-1))+1)+j-1]
#             # println("ind: $((sum(1:(i-1))+1)+j -1)")
#         end
#     end
#     for i = 2:N
#         for j=1:i-1
#             A0[j,i] += p[ ((sum(1:N)) + (sum(1:(i-2))+1) + j -1) ]*im
#             # println("ind: $((sum(1:N)) + (sum(1:(i-1))+1) + j -1)")
#         end
#     end
#     A = Hermitian(A0)
# end
#
# function A_from_p_real(p)
#     N = Int(sqrt(length(p)))
#     Ar = zeros(eltype(p),(N,N))
#     for i = 1:N
#         for j=1:i
#             Ar[j,i] = p[(sum(1:(i-1))+1)+j-1]
#             # println("ind: $((sum(1:(i-1))+1)+j -1)")
#         end
#     end
#     Ar
# end
#
# function A_from_p_imag(p)
#     N = Int(sqrt(length(p)))
#     Ai = zeros(eltype(p),(N,N))
#     for i = 2:N
#         for j=1:i-1
#             Ai[j,i] += p[ ((sum(1:N)) + (sum(1:(i-2))+1) + j -1) ]
#             # println("ind: $((sum(1:N)) + (sum(1:(i-1))+1) + j -1)")
#         end
#     end
#     Ai
# end
#
# function foo(p)
#     # A = Hermitian(diagm([ N-nn => p[(sum(1:(nn-1))+1:sum(1:nn))] for nn=1:N]...) + im*diagm([ N-nn => p[(sum(1:(nn-1))+1:sum(1:nn))] for nn=1:(N-1)]...))
#     A = Hermitian(reshape(p,(2048,2048)))#A_from_p(p)
#     F = eigen(A)
#     Œ± = F.values
#     X = F.vectors
#     Xone = Zygote.@showgrad(X[:,1])
#     Œ±one = Zygote.@showgrad(Œ±[1])
#     # sum(x->abs2(x)^6,Xone) * Œ±one^2
#     proc_eigs(Xone,Œ±one)
# end
#
#
# function ‚àÇfoo_SJ(p,Œ±,X,Œ±ÃÑ,XÃÑ;i=1)
#     # A = Hermitian(diagm([ N-nn => p[(sum(1:(nn-1))+1:sum(1:nn))] for nn=1:N]...) + im*diagm([ N-nn => p[(sum(1:(nn-1))+1:sum(1:nn))] for nn=1:(N-1)]...))
#     # A = A_from_p(p)
#     # A, Ap_pb = Zygote.pullback(A_from_p,p)
#     A, Ap_pb = Zygote.pullback(x->Hermitian(reshape(x,(2048,2048))),p)
#     Œ±,X = eigen(A)
#     XÃÑ,Œ±ÃÑ = Zygote.gradient(proc_eigs,X[:,1],Œ±[1])
#     P = I - X[:,i] * X[:,i]'
#     b = P * XÃÑ #[i]
#     Œª‚ÇÄ = IterativeSolvers.bicgstabl(A-Œ±[i]*I,b,3)
#     if isnothing(Œ±ÃÑ)
#         Œ±ÃÑ = 0.
#     end
#     Œª = Œª‚ÇÄ - Œ±ÃÑ * X[:,i]
#     AÃÑ = -Œª * X[:,i]'
#     Ap_pb(AÃÑ)
# end



##

using ReverseDiff #: JacobianTape, JacobianConfig, jacobian, jacobian!, compile
# using LinearAlgebra: mul!

#########
# setup #
#########

# some objective functions to work with
f(a, b) = (a + b) * (a * b)'
g!(out, a, b) = mul!(out, a + b, a * b)

# pre-record JacobianTapes for `f` and `g` using inputs of shape 10x10 with Float64 elements
const f_tape = ReverseDiff.JacobianTape(f, (rand(10, 10), rand(10, 10)))
const g_tape = ReverseDiff.JacobianTape(g!, rand(10, 10), (rand(10, 10), rand(10, 10)))

# compile `f_tape` and `g_tape` into more optimized representations
const compiled_f_tape = ReverseDiff.compile(f_tape)
const compiled_g_tape = ReverseDiff.compile(g_tape)

# some inputs and work buffers to play around with
a, b = rand(10, 10), rand(10, 10)
inputs = (a, b)
output = rand(10, 10)
results = (similar(a, 100, 100), similar(b, 100, 100))
fcfg = ReverseDiff.JacobianConfig(inputs)
gcfg = ReverseDiff.JacobianConfig(output, inputs)

####################
# taking Jacobians #
####################

# with pre-recorded/compiled tapes (generated in the setup above) #
#-----------------------------------------------------------------#

# these should be the fastest methods, and non-allocating
ReverseDiff.jacobian!(results, compiled_f_tape, inputs)
ReverseDiff.jacobian!(results, compiled_g_tape, inputs)
ReverseDiff.jacobian!(results, f_tape, inputs)
ReverseDiff.jacobian!(results, g_tape, inputs)

const A_from_p_tape = ReverseDiff.JacobianTape(A_from_p, p)
const A_from_p_RD_tape = ReverseDiff.JacobianTape(A_from_p_RD, p)
const A_from_p_real_tape = ReverseDiff.JacobianTape(A_from_p_real, p)
const A_from_p_imag_tape = ReverseDiff.JacobianTape(A_from_p_imag, p)
A_from_p_real_cfg = ReverseDiff.JacobianConfig(p)

inputs = (p,)
results = (similar(p))
ReverseDiff.jacobian!(results, A_from_p_real_tape, p)
ReverseDiff.jacobian(A_from_p_RD, p)
ReverseDiff.jacobian(A_from_p_real, p)

f(rand(10, 10), rand(10, 10))

##
function f(p)
    a = [      1 + 0.1*sin(p[1])                 0.05
               -0.05                       2 + 0.1*cos(p[1])^2        ]
    A = Hermitian(a * a')
    Œ±, X‚Éó = eigen(A)
    return Œ±[1]*sum(abs2.(X‚Éó))
end

x = 0:0.05:3œÄ
p = [ [xx 3.0 ] for xx in x ]

# @show val = f.(p)
# @show jac = [ ReverseDiff.jacobian(f, pp) for pp in p]


##
xs = 0:0.05:3œÄ
grads = [ Zygote.gradient(x->f(x),xx)[1] for xx in xs]

plot(xs,grads)
##

v1 = [v[1] for v in val]
j11 = [j[1,1] for j in jac]

# v2 = [v[2] for v in val]
# j22 = [j[2,2] for j in jac]

l1 = plot(x,v1,label="v1")
plot!(l1,x,j11,label="j11")
# plot!(l1,x,v2,label="v2")
# plot!(l1,x,j22,label="j22")

##

function f(a)
    A = a * a'
    Œ±, X‚Éó = eigen(A)
    return Œ±
end

inputs = rand(3,3)
@show jac = ReverseDiff.jacobian(f, inputs);
@show typeof(jac);
@show size(jac[1]);
@show size(jac[2]);

##
W = rand(2, 3); x = rand(3);
Zygote.gradient(W -> sum(W*x), W)[1]

##

function g(a)
    A = a * a'
    Œ±, X‚Éó = eigen(A)
    return sum(Œ±)
end

x = rand(3,3)
Zygote.gradient(x -> g(x), x)[1]


## Functions

function foo(p::AbstractArray)
    A0 = Matrix(reshape(p,(3,3)))
    A = A0 * A0'
    # A = SHermitianCompact{10,Float64,sum(1:10)}(p)
    Œ±, X‚Éó = eigen(A)
    return sum(X‚Éó) + sum(Œ±) + sum(p)
end

function goo(p::AbstractArray)
    A0 = Matrix(reshape(p,(3,3)))
    A = A0 * A0'
    # A = SHermitianCompact{10,Float64,sum(1:10)}(p)
    Œ±, X‚Éó = eigen(A)
    return Œ±
end



p = randn(9)
foo(p)
goo(p)

## Finite Difference Gradients

# for p = randn(N¬≤)
# tested with N = 3

#### Find dfoo/dx via FiniteDifferences.jl
using FiniteDifferences
@show FiniteDifferences.grad(central_fdm(3,1),foo,p)        # tuple w/ size=(N¬≤,) Array of gradient of foo w.r.t. p‚Éó components
@show FiniteDifferences.jacobian(central_fdm(3,1),goo,p)    # tuple w/ size=(N¬≤,) Array of gradient of foo w.r.t. p‚Éó components

##

#### Find dfoo/dx via ForwardDiff.jl
using ForwardDiff
@show dfoo_fmad = ForwardDiff.gradient(foo, p)
@show dgoo_fmad = ForwardDiff.jacobian(goo, p)

##

#### Find dfoo/dx via Zygote.jl
using Zygote
Zygote.gradient(foo, p)

##

foo'(randn(100))

##

foo'(randn(Float64,sum(1:10)))


##

dx = 0.03
x = collect(-œÄ:dx:œÄ)
f = tan
ylim = (-10,10)


p = plot(x,f.(x);ylim,label="f")
plot!(p,x,f'.(x);ylim,label="f'")


## General function of eigenproblem results -> compare with Sec. 4 of https://math.mit.edu/~stevenj/18.336/adjoint.pdf

N = 12
T = Float64 #ComplexF64

p = randn(T,sum(1:N))
A = SHermitianCompact{N,T,sum(1:N)}(p)
A = A * A'

# p = randn(T,N,N)
# A = Matrix(randn(p)
# A = A * A'

# Œ±, X‚Éó = eigen(A)


# function g(X‚Éó,Œ±,p)
#     sum(X‚Éó) + sum(Œ±) + sum(p)
# end

##

################################################################################
################################################################################
################################################################################
################################################################################

function ftest1(p = p0;
                Œîx = 6.0,
                Œîy = 4.0,
                Œîz = 1.0,
                Nx = 16,
                Ny = 16,
                Nz = 1)
    kz, w, t_core, Œ∏, n_core, n_subs, edge_gap = p
    # kz=p[1]; w=p[2]; t_core=p[3]; Œ∏=p[4]; n_core=p[5]; n_subs=p[6]; edge_gap=p[7]
    # grid = OptiMode.make_MG(Œîx, Œîy, Œîz, Nx, Ny, Nz)
    shapes = ridge_wg(w,t_core,Œ∏,edge_gap,n_core,n_subs,Œîx,Œîy)
    # grid = Zygote.@ignore OptiMode.make_MG(6.0,4.0,1.0,16,16,1)
    # shapes = ridge_wg(p[2],p[3],p[4],p[7],p[5],p[6],6.0,4.0)
    # sum(abs.(shapes[1].v))
    # ei_field = make_Œµ‚Çõ‚Åª¬π(shapes,grid)
    ei_field = make_ei1(shapes,Œîx, Œîy, Œîz, Nx, Ny, Nz)
    sum(ei_field)
end
using ArrayInterface
ftest1(p0)
gradient(ftest1,p0)
using ReverseDiff
# ForwardDiff.gradient(ftest1,p0)
y,back =  _pullback(Context(),ftest1,p0)
@code_typed _pullback(Context(),ftest1,p0)
##
# function fp(v::SMatrix{K,2,<:Real}, data::D=nothing) where {K,D}
function fp(v::AbstractMatrix{<:Real}, data::D=nothing) where D
    K = size(v,1);
    @show typeof(v)
    # v = SMatrix{K,2}(vin)
    # v = copy(vin)
    # Sort the vertices in the counter-clockwise direction
    @show w = v .- mean(v, dims=1)  # v in center-of-mass coordinates
    œï = mod.(atan.(w[:,2], w[:,1]), 2œÄ)  # SVector{K}: angle of vertices between 0 and 2œÄ; `%` does not work for negative angle
    if !issorted(œï)
        # Do this only when œï is not sorted, because the following uses allocations.
        ind = MVector{K}(sortperm(œï))  # sortperm(::SVector) currently returns Vector, not MVector
        @show v = v[ind,:]  # SVector{K}: sorted v
    end

    # Calculate the increases in angle between neighboring edges.
    # ‚àÜv = vcat(diff(v, dims=1), SMatrix{1,2}(v[1,:]-v[end,:]))  # SMatrix{K,2}: edge directions
    @show ‚àÜv = vcat(diff(v, dims=1), transpose(v[1,:]-v[end,:]))
    ‚àÜz = ‚àÜv[:,1] + im * ‚àÜv[:,2]  # SVector{K}: edge directions as complex numbers
    icurr = ntuple(identity, Val(K-1))
    inext = ntuple(x->x+1, Val(K-1))
    ‚àÜœï = angle.(‚àÜz[SVector(inext)] ./ ‚àÜz[SVector(icurr)])  # angle returns value between -œÄ and œÄ

    # Check all the angle increases are positive.  If they aren't, the polygon is not convex.
    #@assert all(‚àÜœï .> 0) #|| throw("v = $v should represent vertices of convex polygon.")

    n0 = [‚àÜv[:,2] -‚àÜv[:,1]]  # outward normal directions to edges
    # norms = SVector{K,Float64}([hypot(n0[vind,1],n0[vind,2]) for vind=1:K])
    @show n = n0 ./ hypot.(n0[:,1],n0[:,2])  # normalize
    # n0_norm = sqrt.( n0[:,1].^2 + n0[:,2].^2  )
    # nM =  Matrix(n0) ./ Vector(n0_norm)
    # n = SMatrix(nM)
    # nt = [normalize(n0[vind,:])[cind] for cind=1:2,vind=1:4]
    @show typeof(v)
    return Polygon{K,2K,D}(v,(SMatrix{4,2,Float64}(n)),data)
    # return SMatrix{K,2}(n) #Polygon{K,2K,D}(v,n,data)
end

fp(v1,6.3).n[2,2]
fp(v0,6.3)
Zygote.gradient(v -> v[1], SVector(5,5))[1]
Zygote.gradient((a,b) -> SVector(a,b)[1], 5,5)
Zygote.gradient((a,b) -> sum(SVector(a,b)), 5,5)

SMatrix{2,2,Float64,4}(1,2,3,4)
Zygote.gradient(m->m[1,1], SMatrix{2,2,Float64,4}(1,2,3,4))
gradient(v1,6.3) do a,b
    nn = fp(a,b).n[2,2] #.n
    # nn[1,1]
    #sum(abs.())
end

fp(v0,6.3)

v0 = [  0.85    -0.85   -1.     1.
        0.35    0.35    -0.35   -0.35   ]'

v1 = [  0.85     0.35
        -0.85    0.35
        -1.      -0.35
        1.       -0.35  ]
v1 ‚âà v0
‚àÜv = vcat(diff(v0, dims=1), SMatrix{1,2}(v0[1,:]-v0[end,:]))
‚àÜv2 = vcat(diff(v0, dims=1), (v0[1,:]-v0[end,:])')
‚àÜv2 ‚âà ‚àÜv
(v0[1,:]-v0[end,:])'
fp(v0,6.3)
fp(v0,6.3).v[1,1]

n1 = @SMatrix [ 0.      1.7
                -0.7    0.15
                0.      -2.
                0.7     0.15    ]

n1[:,1], n1[:,2]

hypot.(n1[:,1], n1[:,2])

n2M = Matrix(n1) ./ Vector(hypot.(n1[:,1],n1[:,2]))
n2SM = SMatrix{4,2,Float64,8}(n2M)
n1 ./ sqrt.( n1[:,1].^2 + n1[:,2].^2  )
@assert sqrt.( n1[:,1].^2 + n1[:,2].^2  ) ‚âà hypot.(n1[:,1],n1[:,2])

abs2.(n1)

Zygote.@adjoint (T::Type{<:SMatrix})(xs::Number...) = T(xs...), dv -> (nothing, dv...)
Zygote.@adjoint (T::Type{<:SMatrix})(x::AbstractMatrix) = T(x), dv -> (nothing, dv)


Zygote.refresh()


##

using GeometryPrimitives
using OptiMode: make_KDTree
using Zygote: dropgrad
function make_ei1(shapes::Vector{<:GeometryPrimitives.Shape}, Œîx, Œîy, Œîz, Nx, Ny, Nz)::Array{Float64,5}
    tree = make_KDTree(shapes)
    Œ¥x = dropgrad(Œîx) / dropgrad(Nx)    # Œ¥x
    Œ¥y = dropgrad(Œîy) / dropgrad(Ny)    # Œ¥y
    x = ( ( dropgrad(Œîx) / dropgrad(Nx) ) .* (0:(dropgrad(Nx)-1))) .- dropgrad(Œîx)/2.  # x
    y = ( ( dropgrad(Œîy) / dropgrad(Ny) ) .* (0:(dropgrad(Ny)-1))) .- dropgrad(Œîy)/2.  # y
    ebuf = Zygote.Buffer(Array{Float64}([1.0 2.0]),3,3,dropgrad(Nx),dropgrad(Ny),1)
    # for i=1:dropgrad(Nx),j=1:dropgrad(Ny),kk=1:dropgrad(Nz)
        # ebuf[:,:,i,j,kk] = inv(Œµ‚Çõ(shapes,dropgrad(tree),dropgrad(x[i]),dropgrad(y[j]),dropgrad(Œ¥x),dropgrad(Œ¥y)))
    for a=1:3,b=1:3,i=1:dropgrad(Nx),j=1:dropgrad(Ny),kk=1:dropgrad(Nz)
        ebuf[a,b,i,j,kk] = inv(Œµ‚Çõ(shapes,dropgrad(tree),dropgrad(x[i]),dropgrad(y[j]),dropgrad(Œ¥x),dropgrad(Œ¥y)))[a,b]
    end
    return real(copy(ebuf))
end

##
@assert typeof(ridge_wg(p0[2],p0[3],p0[4],p0[7],p0[5],p0[6],6.0,4.0))<:Vector{<:GeometryPrimitives.Shape}
ftest(p0)
Zygote.gradient(ftest,p0)

##
