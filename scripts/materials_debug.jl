using Symbolics
using SymbolicUtils
using RuntimeGeneratedFunctions
# using ModelingToolkit
using Unitful, UnitfulEquivalences
using LinearAlgebra
using StaticArrays
using SparseArrays
using Tullio
using Symbolics: get_variables
using ChainRules
using Zygote
using ForwardDiff
using Symbolics: destructure_arg, DestructuredArgs, make_array, _make_array, SerialForm, Func, toexpr, _build_and_inject_function, @__MODULE__, MultithreadedForm, tosymbol, Sym
using SymbolicUtils.Code: MakeArray
using Rotations
import Symbolics: substitute, simplify
Symbolics.substitute(A::AbstractArray{Num},d::Dict) = Symbolics.substitute.(A,(d,))
Symbolics.simplify(A::AbstractArray{Num}) = Symbolics.simplify.(A)

# short term manual fix for bug in SymbolicUtils.Code.create_array(::Type{<:Matrix},...) methods
# see https://github.com/JuliaSymbolics/SymbolicUtils.jl/issues/270
# import SymbolicUtils.Code: create_array
# @inline function SymbolicUtils.Code.create_array(::Type{<:Matrix}, ::Nothing, ::Val{dims}, elems...) where dims
# 	rows = Tuple(repeat([dims[2],],dims[1]))
# 	Base.hvcat(rows, elems...)
# end
# @inline function SymbolicUtils.Code.create_array(::Type{<:Matrix}, T, ::Val{dims}, elems...) where dims
# 	rows = Tuple(repeat([dims[2],],dims[1]))
#     Base.typed_hvcat(T, rows, elems...)
# end

# adjoint/rrule for SymbolicUtils.Code.create_array
# https://github.com/JuliaSymbolics/SymbolicUtils.jl/pull/278/files
function ChainRulesCore.rrule(::typeof(SymbolicUtils.Code.create_array), A::Type{<:AbstractArray}, T, u::Val{j}, d::Val{dims}, elems...) where {dims, j}
  y = SymbolicUtils.Code.create_array(A, T, u, d, elems...)
  function create_array_pullback(Œî)
    dx = Œî
    (NO_FIELDS, DoesNotExist(), DoesNotExist(), DoesNotExist(), DoesNotExist(), dx..., ntuple(_ -> DoesNotExist(), length(elems) - prod(dims) + j)...)
  end
  y, create_array_pullback
end

# add Symbolics.get_variables for arrays of `Num`s
import Symbolics.get_variables
function Symbolics.get_variables(A::AbstractArray{Num})
	unique(vcat(get_variables.(A)...))
end


RuntimeGeneratedFunctions.init(@__MODULE__)

# add minimal Unitful+Symbolics interoperability
import Base:*
*(x::Unitful.AbstractQuantity,y::Num) =  Quantity(x.val*y, unit(x))
*(y::Num,x::Unitful.AbstractQuantity) = x*y

# rrules
ChainRulesCore.rrule(T::Type{<:SArray}, xs::Number...) = ( T(xs...), dv -> (NO_FIELDS, dv...) )
ChainRulesCore.rrule(T::Type{<:SArray}, x::AbstractArray) = ( T(x), dv -> (NO_FIELDS, dv) )
ChainRulesCore.rrule(T::Type{<:SMatrix}, xs::Number...) = ( T(xs...), dv -> (NO_FIELDS, dv...) )
ChainRulesCore.rrule(T::Type{<:SMatrix}, x::AbstractMatrix) = ( T(x), dv -> (NO_FIELDS, dv) )
ChainRulesCore.rrule(T::Type{<:SVector}, xs::Number...) = ( T(xs...), dv -> (NO_FIELDS, dv...) )
ChainRulesCore.rrule(T::Type{<:SVector}, x::AbstractVector) = ( T(x), dv -> (NO_FIELDS, dv) )

function ChainRulesCore.rrule(::typeof(SparseArrays.SparseMatrixCSC),
    m::Integer, n::Integer, pp::Vector, ii::Vector, Av::Vector)
    A = SparseMatrixCSC(m,n,pp,ii,Av)
    function SparseMatrixCSC_pullback(dA::AbstractMatrix)
        dAv = Vector{eltype(dA)}(undef, length(Av))
        for j = 1:n, p = pp[j]:pp[j+1]-1
            dAv[p] = dA[ii[p],j]
        end
        return (NO_FIELDS, DoesNotExist(), DoesNotExist(), DoesNotExist(), DoesNotExist(), dAv)
    end
    function SparseMatrixCSC_pullback(dA::SparseMatrixCSC)
        @assert getproperty.(Ref(A), (:m,:n,:colptr,:rowval)) == getproperty.(Ref(dA), (:m,:n,:colptr,:rowval))
        return (NO_FIELDS, DoesNotExist(), DoesNotExist(), DoesNotExist(), DoesNotExist(), dA.nzval)
    end

    return A, SparseMatrixCSC_pullback
end

function mult(œá::AbstractArray{T,3},v‚ÇÅ::AbstractVector,v‚ÇÇ::AbstractVector) where T<:Real
	@tullio v‚ÇÉ[i] := œá[i,j,k] * v‚ÇÅ[j] * v‚ÇÇ[k]
end

function mult(œá::AbstractArray{T,4},v‚ÇÅ::AbstractVector,v‚ÇÇ::AbstractVector,v‚ÇÉ::AbstractVector) where T<:Real
	@tullio v‚ÇÑ[i] := œá[i,j,k,l] * v‚ÇÅ[j] * v‚ÇÇ[k] * v‚ÇÉ[l]
end

function Œî‚Çò_factors(Œªs,Œµ_sym)
	Œª = Num(first(get_variables(sum(Œµ_sym))))
	diagŒµ_m1 = Vector(diag(Œµ_sym)) .- 1
	mapreduce(lm->substitute.( diagŒµ_m1, ([Œª=>lm],)), .*, Œªs)
end

function Œî‚Çò(Œªs::AbstractVector,Œµ_sym, Œª·µ£s::AbstractVector, œá·µ£::AbstractArray{T,3}) where T
	dm = Œî‚Çò_factors(Œªs,Œµ_sym) ./ Œî‚Çò_factors(Œª·µ£s,Œµ_sym)
	@tullio œá[i,j,k] := œá·µ£[i,j,k] * dm[i] * dm[j] * dm[k] fastmath=true
end

function generate_array_fn(args::Vector{Num},A::AbstractMatrix; expr_module=@__MODULE__(), parallel=SerialForm())
	return fn = _build_and_inject_function(expr_module,toexpr(Func(args,[],make_array(parallel,args,A,Matrix))))
end

function generate_array_fn(arg::Num,A::AbstractMatrix; expr_module=@__MODULE__(), parallel=SerialForm())
	return fn = generate_array_fn([arg,], A; expr_module, parallel)
end

function generate_array_fn(args::Vector{Num},A::SArray; expr_module=@__MODULE__(), parallel=SerialForm())
	return fn = _build_and_inject_function(expr_module,toexpr(Func(args,[],make_array(parallel,args,A,SArray))))
end

function generate_array_fn(arg::Num,A::SArray; expr_module=@__MODULE__(), parallel=SerialForm())
	return fn = generate_array_fn([arg,], A; expr_module, parallel)
end


function generate_array_fn(args::Vector{Num},A::TA; expr_module=@__MODULE__(), parallel=SerialForm()) where TA<:AbstractArray
	return fn = _build_and_inject_function(expr_module,toexpr(Func(args,[],make_array(parallel,args,A,TA))))
end

function generate_array_fn(arg::Num,A::TA; expr_module=@__MODULE__(), parallel=SerialForm()) where TA<:AbstractArray
	return fn = generate_array_fn([arg,], A; expr_module, parallel)
end

"""
################################################################################
#																			   #
#							   	   Materials							   	   #
#																			   #
################################################################################
"""

abstract type AbstractMaterial end

struct Material <: AbstractMaterial
	models::Dict
	defaults::Dict
end

function get_model(mat::AbstractMaterial,model_name::Symbol,args...)
	model = mat.models[model_name]
	missing_var_defaults = filter(x->!in(first(x),tosymbol.(args)),mat.defaults)
	subs =  Dict([(Sym{Real}(k),v) for (k,v) in missing_var_defaults])
	if typeof(model)<:AbstractArray
		model_subs = substitute.(model, (subs,))
	else
		model_subs = substitute(model, subs)
	end
	return model_subs
end

function generate_fn(mat::AbstractMaterial,model_name::Symbol,args...)
	model = get_model(mat,model_name,args...)
	if typeof(model)<:AbstractArray
		fn = generate_array_fn([Num(Sym{Real}(arg)) for arg in args],model)
	else
		fn = build_function(model,args...;expression=Val{false})
	end
	return fn
end

"""
################################################################################
#																			   #
#							   	  Rotations							   		   #
#																			   #
################################################################################
"""

struct RotatedMaterial{TM,TR} <: AbstractMaterial
	parent::TM
	rotation::TR
	rotation_defaults::Dict
end

function rotate(œá::AbstractMatrix,ùì°::AbstractMatrix)
	@tullio œá·µ£[i,j] := ùì°[a,i] * ùì°[b,j] * œá[a,b]  fastmath=true
end

function rotate(œá::AbstractArray{T,3},ùì°::AbstractMatrix) where {T<:Real}
	@tullio œá·µ£[i,j,k] := ùì°[a,i] * ùì°[b,j] * ùì°[c,k] * œá[a,b,c]  fastmath=true
end

function rotate(œá::AbstractArray{T,4},ùì°::TR) where {T<:Real, TR<:StaticMatrix{3,3}}
	@tullio œá·µ£[i,j,k,l] := ùì°[a,i] * ùì°[b,j] * ùì°[c,k] * ùì°[d,l] * œá[a,b,c,d]  fastmath=true
end

rotate(œá::Real,ùì°::StaticMatrix{3,3}) = œá

function rotate(mat::TM,ùì°::TR) where {TM<:AbstractMaterial,TR<:AbstractMatrix}
	if eltype(ùì°)<:Num
		vars = get_variables(ùì°)
		defs = Dict{Symbol,Real}([ tosymbol(var) => 0.0 for var in vars])
	else
		defs = Dict{Symbol,Real}([])
	end
	RotatedMaterial{TM,TR}(mat,ùì°,defs)
end

function rotate(mat::TM,ùì°::TR,defs::Dict) where {TM<:AbstractMaterial,TR<:AbstractMatrix}
	RotatedMaterial{TM,TR}(mat,ùì°,defs)
end

function get_model(mat::RotatedMaterial,model_name::Symbol,args...)
	model = rotate(mat.parent.models[model_name],mat.rotation)
	defs = merge(mat.parent.defaults,mat.rotation_defaults)
	missing_var_defaults = filter(x->!in(first(x),tosymbol.(args)),defs)
	subs =  Dict([(Sym{Real}(k),v) for (k,v) in missing_var_defaults])
	if typeof(model)<:AbstractArray
		model_subs = substitute.(model, (subs,))
	else
		model_subs = substitute(model, subs)
	end
	return model_subs
end

"""
################################################################################
#																			   #
#					  Dispersion (group index, GVD) models					   #
#																			   #
################################################################################
"""

function ng_model(n_model::Num, Œª::Num)
	DŒª = Differential(Œª)
	return n_model - ( Œª * expand_derivatives(DŒª(n_model)) )
end

function gvd_model(n_model::Num, Œª::Num)
	DŒª = Differential(Œª)
	return Œª^3 * expand_derivatives(DŒª(DŒª(n_model)))
end

ng_model(n_model::AbstractArray{Num}, Œª::Num) = ng_model.(n_model,(Œª,))
gvd_model(n_model::AbstractArray{Num}, Œª::Num) = gvd_model.(n_model,(Œª,))

function ng_model(mat::AbstractMaterial; symbol=:Œª)
	Œª = Num(Sym{Real}(symbol))
	n_model = sqrt.(get_model(mat,:Œµ,symbol))
	return ng_model(n_model,Œª)
end

function gvd_model(mat::AbstractMaterial; symbol=:Œª)
	Œª = Num(Sym{Real}(symbol))
	n_model = sqrt.(get_model(mat,:Œµ,symbol))
	return gvd_model(n_model,Œª)
end

##

function n¬≤_MgO_LiNbO‚ÇÉ_sym(Œª, T; a‚ÇÅ, a‚ÇÇ, a‚ÇÉ, a‚ÇÑ, a‚ÇÖ, a‚ÇÜ, b‚ÇÅ, b‚ÇÇ, b‚ÇÉ, b‚ÇÑ, T‚ÇÄ)
    f = (T - T‚ÇÄ) * (T + T‚ÇÄ + 2*273.16)  # so-called 'temperature dependent parameter'
    Œª¬≤ = Œª^2
    a‚ÇÅ + b‚ÇÅ*f + (a‚ÇÇ + b‚ÇÇ*f) / (Œª¬≤ - (a‚ÇÉ + b‚ÇÉ*f)^2) + (a‚ÇÑ + b‚ÇÑ*f) / (Œª¬≤ - a‚ÇÖ^2) - a‚ÇÜ*Œª¬≤
end

p‚Çë = (
    a‚ÇÅ = 5.756,
    a‚ÇÇ = 0.0983,
    a‚ÇÉ = 0.202,
    a‚ÇÑ = 189.32,
    a‚ÇÖ = 12.52,
    a‚ÇÜ = 1.32e-2,
    b‚ÇÅ = 2.86e-6,
    b‚ÇÇ = 4.7e-8,
    b‚ÇÉ = 6.113e-8,
    b‚ÇÑ = 1.516e-4,
    T‚ÇÄ = 24.5,      # reference temperature in [Deg C]
)
p‚Çí = (
    a‚ÇÅ = 5.653,
    a‚ÇÇ = 0.1185,
    a‚ÇÉ = 0.2091,
    a‚ÇÑ = 89.61,
    a‚ÇÖ = 10.85,
    a‚ÇÜ = 1.97e-2,
    b‚ÇÅ = 7.941e-7,
    b‚ÇÇ = 3.134e-8,
    b‚ÇÉ = -4.641e-9,
    b‚ÇÑ = -2.188e-6,
    T‚ÇÄ = 24.5,      # reference temperature in [Deg C]
)

p·µ™‚ÇÇ = (
	d‚ÇÉ‚ÇÉ =   20.3,    #   pm/V
	d‚ÇÉ‚ÇÅ =   -4.1,    #   pm/V
	d‚ÇÇ‚ÇÇ =   2.1,     #   pm/V
	Œªs  =  [1.313, 1.313, 1.313/2.0]
)

function make_LN(;p‚Çí=p‚Çí,p‚Çë=p‚Çë,p·µ™‚ÇÇ=p·µ™‚ÇÇ)
	@variables Œª, T, Œªs[1:3]
	n‚Çí¬≤ = n¬≤_MgO_LiNbO‚ÇÉ_sym(Œª, T; p‚Çí...)
	n‚Çë¬≤ = n¬≤_MgO_LiNbO‚ÇÉ_sym(Œª, T; p‚Çë...)
	Œµ 	= diagm([n‚Çí¬≤, n‚Çí¬≤, n‚Çë¬≤])
	d‚ÇÉ‚ÇÉ, d‚ÇÉ‚ÇÅ, d‚ÇÇ‚ÇÇ, Œª·µ£s = p·µ™‚ÇÇ
	œá‚ÅΩ¬≤‚Åæ·µ£ = cat(
		[ 	0.0	 	-d‚ÇÇ‚ÇÇ 	d‚ÇÉ‚ÇÅ			#	xxx, xxy and xxz
		 	-d‚ÇÇ‚ÇÇ	0.0 	0.0			#	xyx, xyy and xyz
			d‚ÇÉ‚ÇÅ	 	0.0		0.0		],	#	xzx, xzy and xzz
		[ 	-d‚ÇÇ‚ÇÇ	0.0 	0.0			#	yxx, yxy and yxz
			0.0	 	d‚ÇÇ‚ÇÇ 	d‚ÇÉ‚ÇÅ			#	yyx, yyy and yyz
			0.0	 	d‚ÇÉ‚ÇÅ		0.0		],	#	yzx, yzy and yzz
		[ 	d‚ÇÉ‚ÇÅ	 	0.0 	0.0			#	zxx, zxy and zxz
			0.0	 	d‚ÇÉ‚ÇÅ 	0.0			#	zyx, zyy and zyz
			0.0	 	0.0 	d‚ÇÉ‚ÇÉ		],	#	zzx, zzy and zzz
		 dims = 3
	)
	n‚Çí = sqrt(n‚Çí¬≤)
	ng‚Çí = ng_model(n‚Çí,Œª)
	gvd‚Çí = gvd_model(n‚Çí,Œª)
	n‚Çë = sqrt(n‚Çë¬≤)
	ng‚Çë = ng_model(n‚Çë,Œª)
	gvd‚Çë = gvd_model(n‚Çë,Œª)
	models = Dict([
		:n‚Çí		=>	n‚Çí,
		:ng‚Çí	=>	ng‚Çí,
		:gvd‚Çí	=>	gvd‚Çí,
		:n‚Çë		=>	n‚Çë,
		:ng‚Çë	=>	ng‚Çë,
		:gvd‚Çë	=>	gvd‚Çë,
		:ng		=>	diagm([ng‚Çí, ng‚Çí, ng‚Çë]),
		:gvd	=>	diagm([gvd‚Çí, gvd‚Çí, gvd‚Çë]),
		:Œµ 		=> 	Œµ,
		:œá‚ÅΩ¬≤‚Åæ	=>	SArray{Tuple{3,3,3}}(Œî‚Çò(Œªs,Œµ, Œª·µ£s, œá‚ÅΩ¬≤‚Åæ·µ£)),
	])
	defaults =	Dict([
		:Œª		=>		0.8,	# Œºm
		:T		=>		24.5,	# ¬∞C
		:Œªs‚ÇÅ	=>		1.064,	# Œºm
		:Œªs‚ÇÇ	=>		1.064,	# Œºm
		:Œªs‚ÇÉ	=>		0.532,	# Œºm

	])
	Material(models, defaults)
end

LN = make_LN()

LN.models


LN.models[:Œµ]
get_model(LN,:Œµ, :Œª)
feps1 = generate_fn(LN,:Œµ, :Œª)
feps1(0.8)
feps1(0.7)
Zygote.gradient(x->sum(feps1(x)), 0.7)
ForwardDiff.derivative(x->sum(feps1(x)), 0.7)
Zygote.hessian(x->sum(feps1(x)), 0.7)
ForwardDiff.derivative(y->ForwardDiff.derivative(x->sum(feps1(x)),y), 0.7)
ForwardDiff.derivative(feps1,0.7)
ForwardDiff.derivative(x->ForwardDiff.derivative(feps1,x),0.7)

get_model(LN,:œá‚ÅΩ¬≤‚Åæ, :Œªs‚ÇÅ, :Œªs‚ÇÇ, :Œªs‚ÇÉ, :T)
get_model(LN,:œá‚ÅΩ¬≤‚Åæ)
get_model(LN,:œá‚ÅΩ¬≤‚Åæ, :Œªs‚ÇÅ, :Œªs‚ÇÇ, :Œªs‚ÇÉ)
fchi21 = generate_fn(LN, :œá‚ÅΩ¬≤‚Åæ, :Œªs‚ÇÅ, :Œªs‚ÇÇ, :Œªs‚ÇÉ)
Zygote.gradient(x->sum(fchi21(2x,2x,x)), 0.7)
ForwardDiff.derivative(x->sum(fchi21(2x,2x,x)), 0.7)
Zygote.hessian(x->sum(fchi21(2x,2x,x)), 0.7)
ForwardDiff.derivative(y->ForwardDiff.derivative(x->sum(fchi21(2x,2x,x)),y), 0.7)

LN.models[:n‚Çí]
fno = generate_fn(LN,:n‚Çí, :Œª)
fno(0.8)
fno''(0.8)
Zygote.hessian(fno,0.8)

fno'.([0.7,0.8,0.9])
##
ùì° = MRP(RotY(œÄ/2)) |> Matrix
LNr = rotate(LN,ùì°)
ùì°2 = MRP(RotY(œÄ/4)) |> Matrix
LNr2 = rotate(LN,ùì°2)
epsmr1 = get_model(LNr,:Œµ)
epsmr2 = get_model(LNr2,:Œµ)

epsmr1 = get_model(LNr,:Œµ,:Œª)
epsmr2 = get_model(LNr2,:Œµ,:Œª)
epsmr2 = get_model(LNr2,:Œµ,:Œª,:T)

@variables Œ∏
ùì°3 = RotY(Œ∏) |> Matrix
LNr3 = rotate(LN,ùì°3)
LNr3.rotation

feps1 = generate_fn(LNr,:Œµ, :Œª)
feps1(0.8)

chi2r1 = get_model(LNr,:œá‚ÅΩ¬≤‚Åæ, :Œªs‚ÇÅ, :Œªs‚ÇÇ, :Œªs‚ÇÉ)
get_model(LNr,:œá‚ÅΩ¬≤‚Åæ)[1,1,1]
fchi2r1 = generate_fn(LNr,:œá‚ÅΩ¬≤‚Åæ, :Œªs‚ÇÅ, :Œªs‚ÇÇ, :Œªs‚ÇÉ)

fchi2r1(1.6,1.6,0.8)[1,1,1]
fchi2r1(1.064,1.064,0.532)[1,1,1]

Zygote.gradient(x->fchi2r1(x,x,x/2)[1,1,1],1.064)
ForwardDiff.derivative(x->fchi2r1(x,x,x/2)[1,1,1],1.064)
Zygote.hessian(x->fchi2r1(x,x,x/2)[1,1,1],1.064)
ForwardDiff.derivative(y->ForwardDiff.derivative(x->fchi2r1(x,x,x/2)[1,1,1],y),1.064)

feps3 = generate_fn(LNr3,:Œµ, :Œª, :Œ∏)

feps3(0.8,0.0)




feps3(0.8,œÄ/2.0)






feps3

##



ng_fn(mat::AbstractMaterial; symbol=:Œª)


ng_model(LNr)
@variables Œª
DŒª = Differential(Œª)
DŒª |> typeof
# ng(n_sym::Num) = n_sym - Œª * expand_derivatives(DŒª(n_sym))
# gvd(n_sym::Num) = Œª^3 * expand_derivatives(DŒª(DŒª(n_sym)))

nom = get_model(LN,:n‚Çí,:Œª)
nem = get_model(LN,:n‚Çë,:Œª)
typeof(nom)
DŒª(nom)|>expand_derivatives

ns = [nom, nom, nem]
DŒª.(ns)|>expand_derivatives
##

ùì° = MRP(RotY(œÄ/2))
ùì°
typeof(ùì°)<:AbstractMatrix
LN.models[:Œµ]


@tullio œá·µ£[i,j] := ùì°[a,i] * ùì°[b,j] * (LN.models[:Œµ])[a,b]  fastmath=true

rotate((LN.models[:Œµ]),Matrix{3,3}(ùì°))
rotate((get_model(LN,:œá‚ÅΩ¬≤‚Åæ)),Matrix{3,3}(ùì°))


##
Œµ_syms = tosymbol.(Œµ_vars)
Œµ_syms2 = tosymbol.(get_variables(LN.models[:Œµ]))
Œµ_syms[1] |> tosymbol

getindex.((LN.defaults,),Œµ_syms)

@variables x,y
z = 2x - y^2

substitute(z,Dict([Sym{Real}(:y)=>0.3]))

Num(:x)


##
function make_LN(;p‚Çí=p‚Çí,p‚Çë=p‚Çë,p·µ™‚ÇÇ=p·µ™‚ÇÇ)
	@variables Œª, T
	n‚Çí¬≤ = n¬≤_MgO_LiNbO‚ÇÉ_sym(Œª, T; p‚Çí...)
	n‚Çë¬≤ = n¬≤_MgO_LiNbO‚ÇÉ_sym(Œª, T; p‚Çë...)
	Œµ 	= diagm([n‚Çí¬≤, n‚Çí¬≤, n‚Çë¬≤])
	Material(
		Œµ,							# dielectric tensor
		[Œª, T],						# variables
		[p‚Çí,p‚Çë,p·µ™‚ÇÇ],				# parameters
		[(0.0,8.0),(-20.0,300.0)],	# domains
		Dict([Œª=>0.8,T=>p‚Çí.T‚ÇÄ]),	# Defaults
	)
end

LN = make_LN()
feps_LN = generate_Œµ(LN)
feps_LN(0.8)
feps_LN.([0.8,0.85,0.9])
ForwardDiff.derivative(feps_LN,0.7)
ForwardDiff.derivative(x->ForwardDiff.derivative(feps_LN,x),0.7)
Zygote.gradient(x->sum(feps_LN(x)),0.7)
ForwardDiff.derivative(x->sum(feps_LN(x)),0.7)

fchi2_LN = generate_œá‚ÅΩ¬≤‚Åæ(LN)

fchi2_LN(1.0,1.0,0.5)
fchi2_LN(1.0,1.0,0.5)[3,3,3]

Zygote.gradient(x->sum(fchi2_LN(x,x,x/2)),1.0)
Zygote.hessian(x->sum(fchi2_LN(x,x,x/2)),1.0)
ForwardDiff.derivative(x->sum(fchi2_LN(x,x,x/2)),1.0)
ForwardDiff.derivative(x->fchi2_LN(x,x,x/2),1.0)
ForwardDiff.derivative(y->ForwardDiff.derivative(x->sum(fchi2_LN(x,x,x/2)),y),1.0)
ForwardDiff.derivative(y->ForwardDiff.derivative(x->fchi2_LN(x,x,x/2),y),1.0)
##

@variables Œª, T, Œµ·µ£[1:3,1:3], œá‚ÅΩ¬≤‚Åæ

name 			=	:MgO_LiNbO‚ÇÉ
props 			=	[	:Œµ·µ£, 		:œá‚ÅΩ¬≤‚Åæ 	]
prop_units 		= 	[	NoUnits, 	pm/V	]
params 			= 	[	:Œª, 		:T    	]
param_units 	= 	[	Œºm, 		¬∞C		]
param_defaults 	= 	[	0.8Œºm,		20¬∞C 	]



prop_models		=	Dict([
						:Œµ·µ£ 	=> 	[ 	2.0*Œª	0.0		0.0
						 				0.0		2.1*Œª	0.0
										0.0		0.0		2.2*Œª	],

						:œá‚ÅΩ¬≤‚Åæ => 	cat( [ 	4.0*Œª	0.0		0.0
								 			0.0		4.1*Œª	0.0
											0.0		0.0		2.2*Œª	],
										[ 	4.0*Œª+T	0.0		0.0
								 			0.0		4.1*Œª	0.0
											0.0		0.0		2.2*Œª	],
										dims=3,
										),
])

using Symbolics: get_variables, tosymbol

get_variables.(prop_models)

Dict( zip(keys(prop_models), tosymbol.(vars) for vars in (get_variables.(values(prop_models))) ) )



import Symbolics.get_variables
function Symbolics.get_variables(A::AbstractArray{Num})
	unique(vcat(get_variables.(A)...))
end


get_variables.(values(prop_models))

rhss(value.(Œµ·µ£))

using Symbolics: rhss, lhss, value

# LN = Material(
# 	[	Œµ·µ£	~	[	]
#
# 	]
#
# )


##
## try out Symbolics+Unitful (+FieldMetadata?)
@variables Œª

Œª

lm = 1.0u"Œºm"

uconvert(u"cm", lm)

ustrip(u"nm",lm)

lm - Œª*1.0u"Œºm"

Œª.val

using SymbolicUtils: symtype, @syms, getmetadata
symtype(Œª.val)

typeof(Œª.val)
tosymbol(Œª)
getmetadata(Œª.val)

u"cm" |> typeof <: Unitful.Units

lm
u"cm"(lm)
u"Hz"(lm,Spectral())

uconvert(u"Hz",lm,Spectral())

using Unitful.DefaultSymbols

using FieldMetadata
@metadata describe ""

@describe mutable struct Described
   a::Int     | "an Int with a description"
   b::Float64 | "a Float with a description"
end

d = Described(1, 1.0)

describe(d,:a)

using Parameters
@metadata describe "" String
@metadata bounds (0, 1) Tuple

@bounds @describe @with_kw struct WithKeyword{T}
    a::T = 3 | (0, 100) | "a field with a range, description and default"
    b::T = 5 | (2, 9)   | "another field with a range, description and default"
end

k = WithKeyword()

describe(k, :b)

bounds(k,:b)

##

d‚ÇÉ‚ÇÉ, d‚ÇÉ‚ÇÅ, d‚ÇÇ‚ÇÇ, Œª·µ£s = LN.parameters[3]
chi2 = cat(
	[ 	0.0	 	-d‚ÇÇ‚ÇÇ 	d‚ÇÉ‚ÇÅ			#	xxx, xxy and xxz
		-d‚ÇÇ‚ÇÇ	0.0 	0.0			#	xyx, xyy and xyz
		d‚ÇÉ‚ÇÅ	 	0.0		0.0		],	#	xzx, xzy and xzz
	[ 	-d‚ÇÇ‚ÇÇ	0.0 	0.0			#	yxx, yxy and yxz
		0.0	 	d‚ÇÇ‚ÇÇ 	d‚ÇÉ‚ÇÅ			#	yyx, yyy and yyz
		0.0	 	d‚ÇÉ‚ÇÅ		0.0		],	#	yzx, yzy and yzz
	[ 	d‚ÇÉ‚ÇÅ	 	0.0 	0.0			#	zxx, zxy and zxz
		0.0	 	d‚ÇÉ‚ÇÅ 	0.0			#	zyx, zyy and zyz
		0.0	 	0.0 	d‚ÇÉ‚ÇÉ		],	#	zzx, zzy and zzz
	 dims = 3
)

SArray{Tuple{3,3,3}}(chi2)


function gen_A()
	@variables a
	A	= 	[	a  			0.2
		 		-1.0*a   	2.0*a	]
	fA1 = build_function(A1,Œª‚ÇÅ)[1]|>eval
end

##

@variables a
eps_LN = calculate_Œµ(a,LN)
f1 = generate_array_fn([a,],eps_LN)
f1(0.9)



f2 = _build_and_inject_function(Main,toexpr(Func([a,],[],make_array(SerialForm(),[a,],eps_LN,Matrix))))
f2(0.9)


f3 = _build_and_inject_function(Main,toexpr(Func([a,],[],MakeArray(eps_LN::Matrix,Matrix))))
f3(0.9)

using SymbolicUtils.Code: create_array

f4 = _build_and_inject_function(Main,toexpr(Func([a,],[],create_array(Matrix,nothing, Val{(3,3,3)}(),A...))))
create_array(Matrix, nothing, Val{(3, 3, 3)}(), A...)
f4(0.9)


sum()
Zygote.gradient(x->sum(f4(x)),0.9)


make_array(SerialForm(),[a,],eps_LN,Matrix)




using SymbolicUtils.Code: MakeArray

toexpr(Func([a,],[],make_array(SerialForm(),[a,],eps_LN,Matrix)))




make_array(SerialForm(),[a,],eps_LN,Matrix)))

MakeArray(eps_LN,Matrix)

## MBE
using Symbolics: @variables
using SymbolicUtils.Code: MakeArray, toexpr, create_array
@variables a
A	= 	[	a  		0		0
			0   	2*a		0
			0		0		3*a		]


A_expr = toexpr(MakeArray(A,Matrix))
eval(A_expr)

# ERROR: ArgumentError: argument count 9 does not match specified shape (2, 3)
# Stacktrace:
# {Number})
#    @ Base ./abstractarray.jl:1938
#  [2] hvcat(::Tuple{Int64, Int64}, ::Symbolics.Num, ::Vararg{Number})
#    @ Base ./abstractarray.jl:1925
#  [3] create_array(::Type{Matrix{T} where T}, ::Nothing, ::Val{(3, 3)}, ::Symbolics.Num, ::Vararg{Any})
#    @ SymbolicUtils.Code ~/.julia/packages/SymbolicUtils/fikCA/src/code.jl:411
#  [4] top-level scope
#    @ ~/.julia/packages/SymbolicUtils/fikCA/src/code.jl:374
#  [5] eval
# ...

##
using StaticArrays
using ChainRulesCore
using Zygote
using Symbolics: Num, make_array, SerialForm, Func, toexpr, _build_and_inject_function, @variables
using RuntimeGeneratedFunctions: @__MODULE__, init
init(@__MODULE__)
# generic rrules for StaticArray construction, might also want these for SVector and SMatrix
ChainRulesCore.rrule(T::Type{<:SArray}, xs::Number...) = ( T(xs...), dv -> (NO_FIELDS, dv...) )
ChainRulesCore.rrule(T::Type{<:SArray}, x::AbstractArray) = ( T(x), dv -> (NO_FIELDS, dv) )

# hacky methods bypassing Symbolics.build_function to explicitly specify `SArray` in `make_array`
function generate_array_fn(args::Vector{Num},A::SArray; expr_module=@__MODULE__(), parallel=SerialForm())
	return fn = _build_and_inject_function(expr_module,toexpr(Func(args,[],make_array(parallel,args,A,SArray))))
end

function generate_array_fn(arg::Num,A::SArray; expr_module=@__MODULE__(), parallel=SerialForm())
	return fn = generate_array_fn([arg,], A; expr_module, parallel)
end

function generate_A_fn()
	@variables a
	A	= 		cat(	[	a  		0		0
							0   	2*a		0
							0		0		3*a		],

						[	a^2  	0		0
							0   	sin(a)	0
							0		0		3.3		],
						dims=3,
			)
	return f_A = generate_array_fn(a,SArray{Tuple{3,3,2}}(A))
end
f_A = generate_A_fn()
f_A(0.3)


Zygote.gradient(x->sum(f_A(x)),0.3)

##
# M1 = [ 1.0a 2.0
# 	   3.0	4.0	]

fA1 = build_function(As,a)[1]|>eval
# fA2 = build_function(A,[M1,a])[1]|>eval
fA1(0.5)
Zygote.gradient(x->sum(fA1(x)),0.5)

args = [a,]
dargs = map(arg -> destructure_arg(arg, !checkbounds), [args...])
i = findfirst(x->x isa DestructuredArgs, dargs) # nothing

make_array(SerialForm(),[a,],A,Array)

make_array(SerialForm(),[a,],A,Matrix)

make_array(MultithreadedForm(),[a,],A,Matrix)

fA4 = _build_and_inject_function(Main,toexpr(Func([a,],[],make_array(SerialForm(),[a,],A,SMatrix)))) # == oop_expr2

fA5 = _build_and_inject_function(Main,toexpr(Func([a,],[],make_array(SerialForm(),[a,],A,SArray))))

fA5(0.7)
Zygote.refresh()
Zygote.gradient(x->sum(fA4(x)),0.7)
ForwardDiff.derivative(x->sum(fA5(x)),0.7)
ForwardDiff.derivative(fA4,0.7)

Zygote.gradient(x->sum(fA5(x)),0.7)
ForwardDiff.derivative(x->sum(fA5(x)),0.7)
ForwardDiff.derivative(fA5,0.7)

oop_expr1 = Func(dargs,[],make_array(SerialForm(),[a,],A,Array))

oop_expr2 = Func(dargs,[],make_array(SerialForm(),[a,],A,Matrix))

oop_expr3 = Func(dargs,[],make_array(SerialForm(),[a,],A,Matrix))

expr1 = oop_expr1 |> toexpr

expr2 = oop_expr2 |> toexpr

expr3 = oop_expr2 |> toexpr






MA1 = make_array(SerialForm(),[a,],A,Matrix)

function toexpr2(a::MakeArray, st)
    similarto = toexpr(a.similarto, st)
    T = similarto isa Type ? similarto : :(typeof($similarto))
    elT = a.output_eltype
    quote
        $create_array($T,
                     $elT,
                     Val{$(size(a.elems))}(),
                     $(map(x->toexpr(x, st), a.elems)...),)
    end
end

toexpr2(MA1,Matrix{Float64}())



expr2.head

expr2.args[1].head

expr_mod = @__MODULE__()

# using RuntimeGeneratedFunctions: _tagname,
# using RuntimeGeneratedFunctions


# expr1
(SymbolicUtils.Code.create_array)(Array, nothing, Val{(3, 3)}(), a, (*)(-1.0, a), 0.0, 0.2, (*)(2.0, a), 1.5, (*)(0.5, a), (*)(-2.3, a), (^)(a, 2))
(SymbolicUtils.Code.create_array)(Matrix{T} where T, nothing, Val{(3, 3, 3)}(), a, (*)(-1.0, a), 0.0, 0.2, (*)(2.0, a), 1.5, (*)(0.5, a), (*)(-2.3, a), (^)(a, 2))
#expr2 ^

create_array(Matrix, nothing, Val{(3, 3, 3)}(), a, (*)(-1.0, a), 0.0, 0.2, (*)(2.0, a), 1.5, (*)(0.5, a), (*)(-2.3, a), (^)(a, 2))
create_array(Matrix, nothing, Val{(3, 3, 3)}(), A...)


# expr1
(create_array2)(Array, nothing, Val{(3, 3)}(), a, (*)(-1.0, a), 0.0, 0.2, (*)(2.0, a), 1.5, (*)(0.5, a), (*)(-2.3, a), (^)(a, 2))
(create_array2)(Matrix, nothing, Val{(3, 3)}(), a, (*)(-1.0, a), 0.0, 0.2, (*)(2.0, a), 1.5, (*)(0.5, a), (*)(-2.3, a), (^)(a, 2))
#expr2 ^

els1 = (a, (*)(-1.0, a), 0.0, 0.2, (*)(2.0, a), 1.5, (*)(0.5, a), (*)(-2.3, a), (^)(a, 2))
hvcat((3,3,3),els1...)

@inline function create_array2(::Type{<:Matrix}, ::Nothing, ::Val{dims}, elems...) where dims
	println("")
	println("dims:")
	@show dims
	Base.hvcat(dims, elems...)
end

(SymbolicUtils.Code.create_array)(Matrix{T} where T, nothing, Val{(3, 3)}(), a, (*)(-1.0, a), 0.0, 0.2, (*)(2.0, a), 1.5, (*)(0.5, a), (*)(-2.3, a), (^)(a, 2))

module_tag = getproperty(@__MODULE__(), _tagname)

fA2 = _build_and_inject_function(Main,expr1)
fA3 = _build_and_inject_function(Main,expr2)

fA2(0.8)
fA3(0.8)

Zygote.gradient(x->sum(fA2(x)),0.8)
ForwardDiff.derivative(x->sum(fA2(x)),0.8)

##
eps_sym1 = calculate_Œµ(Œª‚ÇÅ,LN)


using StaticArrays

#substitute.(A1, Œª‚ÇÅ=>0.21)

fA1 = build_function(A1,Œª‚ÇÅ)[1]|>eval
Zygote.gradient(x->sum(fA1(x)),0.5)

fA2 = build_function(A1::Matrix{Num},Œª‚ÇÅ)[1]|>eval
Zygote.gradient(x->sum(fA2(x)),0.5)

A1s = SMatrix{2,2}(A1)
fA3 = build_function(A1s,Œª‚ÇÅ)[1]|>eval
Zygote.gradient(x->sum(fA3(x)),0.5)

(SymbolicUtils.Code.create_array)(Array, nothing, Val{(2, 2)}(), (*)(3.2, Œª‚ÇÅ), (*)(-1.2, Œª‚ÇÅ), 0.2, Œª‚ÇÅ)

(SymbolicUtils.Code.create_array)(Matrix, nothing, Val{(2, 2)}(), (*)(3.2, Œª‚ÇÅ), (*)(-1.2, Œª‚ÇÅ), 0.2, Œª‚ÇÅ)

foo2(x) = (SymbolicUtils.Code.create_array)(Matrix, nothing, Val{(2, 2)}(), (*)(3.2, x), (*)(-1.2, x), 0.2, x)
foo2(3.3)
Zygote.gradient(x->sum(foo2(x)),3.3)
foo3(x) = (SymbolicUtils.Code.create_array)(Array, nothing, Val{(2, 2)}(), (*)(3.2, x), (*)(-1.2, x), 0.2, x)
foo3(3.3)
Zygote.gradient(x->sum(foo3(x)),3.3)



using SymbolicUtils
using SymbolicUtils.Code
toexpr.(eps_sym1)

eps_code1 = build_function(eps_sym1,Œª‚ÇÅ)[1]



##
@variables Œª, T
c = Unitful.c0      # Unitful.jl speed of light
DŒª = Differential(Œª)
DT = Differential(T)
ng(n_sym::Num) = n_sym - Œª * expand_derivatives(DŒª(n_sym))
gvd(n_sym::Num) = Œª^3 * expand_derivatives(DŒª(DŒª(n_sym))) # gvd = uconvert( ( 1 / ( 2œÄ * c^2) ) * _gvd(lm_um,T_C)u"Œºm", u"fs^2 / mm" )

##


s1 = Œª + 3T

typeof(s1)

Symbolics.toexpr(s1)

n‚Çí_MgO_LiNbO‚ÇÉ_sym

simplify(n‚Çí_MgO_LiNbO‚ÇÉ_sym)

ngo = ng(n‚Çí_MgO_LiNbO‚ÇÉ_sym)

simplify(ngo)

gvdo = gvd(n‚Çí_MgO_LiNbO‚ÇÉ_sym)

epsLN = sparse(Diagonal([n‚Çí¬≤_MgO_LiNbO‚ÇÉ_sym, n‚Çí¬≤_MgO_LiNbO‚ÇÉ_sym, n‚Çë¬≤_MgO_LiNbO‚ÇÉ_sym]))
œá‚ÅΩ¬≤‚Åæ_MgO_LiNbO‚ÇÉ_sym(Œª)
œá‚ÅΩ¬≤‚Åæ_MgO_LiNbO‚ÇÉ_sym(0.8)

feps_oop = build_function(epsLN,Œª, expression=Val{false})[1]
feps_ip = build_function(epsLN,Œª, expression=Val{false})[2]

using ChainRules, Zygote, ForwardDiff


feps_oop(0.8)[1,1]
Zygote.refresh()
Zygote.gradient(x->feps_oop(x)[1,1],0.8)[1]
Zygote.hessian(x->feps_oop(x)[1,1],0.8)[1]
ForwardDiff.derivative(feps_oop,0.8)
ForwardDiff.derivative(x->ForwardDiff.derivative(feps_oop,x),0.8)
ForwardDiff.derivative(y->ForwardDiff.derivative(x->ForwardDiff.derivative(feps_oop,x),y),0.8)
##

LN2 = make_LN()
LN3 = make_LN()

LN4 = make_LN()


LN_defs = [var=>LN.defaults[var] for var in LN.variables[2:end]]
substitute.(LN.Œµ,LN_defs)





f_œá‚ÅΩ¬≤‚Åæ_LN = eval(generate_œá‚ÅΩ¬≤‚Åæ(LN4))
expression = Val{true}
f_chiLN = generate_œá‚ÅΩ¬≤‚Åæ(LN)
f_chiLN2 = generate_œá‚ÅΩ¬≤‚Åæ(LN2)
f_chiLN4 = generate_œá‚ÅΩ¬≤‚Åæ(LN3)
f_chiLN5 = generate_œá‚ÅΩ¬≤‚Åæ(LN2)
f_chiLN(1.064,1.064,0.532)
f_chiLN(1.064,1.064,0.532)[3,3,3]
Zygote.gradient(x->f_œá‚ÅΩ¬≤‚Åæ_LN(x,x,x/2)[3,3,3],1.1)

Zygote.gradient(x->f_chiLN2(x,x,x/2)[3,3,3],1.1)
Zygote.gradient(x->f_chiLN5(x,x,x/2)[3,3,3],1.1)

@variables Œª‚ÇÅ, Œª‚ÇÇ, Œª‚ÇÉ
œá‚ÅΩ¬≤‚Åæ_sym = calculate_œá‚ÅΩ¬≤‚Åæ([Œª‚ÇÅ, Œª‚ÇÇ, Œª‚ÇÉ],LN)


get_variables(sum(œá‚ÅΩ¬≤‚Åæ_sym))[1]



get_variables(sum(œá‚ÅΩ¬≤‚Åæ_sym))[1] |> typeof
get_variables(sum(œá‚ÅΩ¬≤‚Åæ_sym))[1] |> Symbolics.arguments
Num(get_variables(sum(œá‚ÅΩ¬≤‚Åæ_sym))[1]) === Œª‚ÇÅ
Œª‚ÇÅ |> typeof
Œª‚ÇÅ |> Symbolics.istree
œá‚ÅΩ¬≤‚Åæ_sym |> Symbolics.istree

œá‚ÅΩ¬≤‚Åæ_sym = calculate_œá‚ÅΩ¬≤‚Åæ([Œª‚ÇÅ, Œª‚ÇÇ, Œª‚ÇÉ],LN)
œá‚ÅΩ¬≤‚Åæ_sym = calculate_œá‚ÅΩ¬≤‚Åæ([1.064,1.064,0.532],LN)[3,3,3]

f_œá‚ÅΩ¬≤‚Åæ_LN(1.064,1.064,0.532)[3,3,3]

substitute.(œá‚ÅΩ¬≤‚Åæ_sym,[Œª‚ÇÅ=>1.064, Œª‚ÇÇ=>1.064, Œª‚ÇÉ=>1.064/2])

Dict(zip(get_variables(sum(œá‚ÅΩ¬≤‚Åæ_sym)),[1.064,1.064,0.532]))

LN.parameters[3][:d‚ÇÉ‚ÇÉ]
d‚ÇÉ‚ÇÉ3, d‚ÇÉ‚ÇÅ3, d‚ÇÇ‚ÇÇ3, Œªs·µ£3 = LN.parameters[3]
d‚ÇÉ‚ÇÉ3
d‚ÇÉ‚ÇÅ3
Symbolics.get_variables(sum(LN.Œµ))
Symbolics.get_varnumber(sum(LN.Œµ))
Symbolics.tosymbol.(Symbolics.get_variables(sum(LN.Œµ)))

##
p‚Çë_MgO_LiNbO‚ÇÉ = (
    a‚ÇÅ = 5.756,
    a‚ÇÇ = 0.0983,
    a‚ÇÉ = 0.202,
    a‚ÇÑ = 189.32,
    a‚ÇÖ = 12.52,
    a‚ÇÜ = 1.32e-2,
    b‚ÇÅ = 2.86e-6,
    b‚ÇÇ = 4.7e-8,
    b‚ÇÉ = 6.113e-8,
    b‚ÇÑ = 1.516e-4,
    T‚ÇÄ = 24.5,      # reference temperature in [Deg C]
)
p‚Çí_MgO_LiNbO‚ÇÉ = (
    a‚ÇÅ = 5.653,
    a‚ÇÇ = 0.1185,
    a‚ÇÉ = 0.2091,
    a‚ÇÑ = 89.61,
    a‚ÇÖ = 10.85,
    a‚ÇÜ = 1.97e-2,
    b‚ÇÅ = 7.941e-7,
    b‚ÇÇ = 3.134e-8,
    b‚ÇÉ = -4.641e-9,
    b‚ÇÑ = -2.188e-6,
    T‚ÇÄ = 24.5,      # reference temperature in [Deg C]
)

@variables Œª, T

n‚Çí¬≤_MgO_LiNbO‚ÇÉ_ŒªT_sym = n¬≤_MgO_LiNbO‚ÇÉ_sym(Œª, T; p‚Çí_MgO_LiNbO‚ÇÉ...)
n‚Çí_MgO_LiNbO‚ÇÉ_ŒªT_sym = sqrt(n‚Çí¬≤_MgO_LiNbO‚ÇÉ_ŒªT_sym)
n‚Çí¬≤_MgO_LiNbO‚ÇÉ_sym = substitute(n‚Çí¬≤_MgO_LiNbO‚ÇÉ_ŒªT_sym,[T=>p‚Çí_MgO_LiNbO‚ÇÉ.T‚ÇÄ])
n‚Çí_MgO_LiNbO‚ÇÉ_sym = sqrt(n‚Çí¬≤_MgO_LiNbO‚ÇÉ_sym)

n‚Çë¬≤_MgO_LiNbO‚ÇÉ_ŒªT_sym = n¬≤_MgO_LiNbO‚ÇÉ_sym(Œª, T; p‚Çë_MgO_LiNbO‚ÇÉ...)
n‚Çë_MgO_LiNbO‚ÇÉ_ŒªT_sym = sqrt(n‚Çë¬≤_MgO_LiNbO‚ÇÉ_ŒªT_sym)
n‚Çë¬≤_MgO_LiNbO‚ÇÉ_sym = substitute(n‚Çë¬≤_MgO_LiNbO‚ÇÉ_ŒªT_sym,[T=>p‚Çë_MgO_LiNbO‚ÇÉ.T‚ÇÄ])
n‚Çë_MgO_LiNbO‚ÇÉ_sym = sqrt(n‚Çë¬≤_MgO_LiNbO‚ÇÉ_sym)


# 	Values to use for green-pumped processes
#    d‚ÇÉ‚ÇÉ = 27

d‚ÇÉ‚ÇÉ =   20.3    #   pm/V
d‚ÇÉ‚ÇÅ =   -4.1    #   pm/V
d‚ÇÇ‚ÇÇ =   2.1     #   pm/V

œá‚ÅΩ¬≤‚Åæ·µ£_MgO_LiNbO‚ÇÉ = cat(
	[ 	0.0	 	-d‚ÇÇ‚ÇÇ 	d‚ÇÉ‚ÇÅ			#	xxx, xxy and xxz
	 	-d‚ÇÇ‚ÇÇ	0.0 	0.0			#	xyx, xyy and xyz
		d‚ÇÉ‚ÇÅ	 	0.0		0.0		],	#	xzx, xzy and xzz
	[ 	-d‚ÇÇ‚ÇÇ	0.0 	0.0			#	yxx, yxy and yxz
		0.0	 	d‚ÇÇ‚ÇÇ 	d‚ÇÉ‚ÇÅ			#	yyx, yyy and yyz
		0.0	 	d‚ÇÉ‚ÇÅ		0.0		],	#	yzx, yzy and yzz
	[ 	d‚ÇÉ‚ÇÅ	 	0.0 	0.0			#	zxx, zxy and zxz
		0.0	 	d‚ÇÉ‚ÇÅ 	0.0			#	zyx, zyy and zyz
		0.0	 	0.0 	d‚ÇÉ‚ÇÉ		],	#	zzx, zzy and zzz
	 dims = 3
)
Œªs_œá‚ÅΩ¬≤‚Åæ·µ£_MgO_LiNbO‚ÇÉ = [1.313,1.313,1.313/2.0]

n‚Çí¬≤·µ£s = [ substitute(n‚Çí¬≤_MgO_LiNbO‚ÇÉ_sym,[Œª=>lm]).val for lm in Œªs_œá‚ÅΩ¬≤‚Åæ·µ£_MgO_LiNbO‚ÇÉ ]
n‚Çë¬≤·µ£s = [ substitute(n‚Çë¬≤_MgO_LiNbO‚ÇÉ_sym,[Œª=>lm]).val for lm in Œªs_œá‚ÅΩ¬≤‚Åæ·µ£_MgO_LiNbO‚ÇÉ ]
Œµ·µ£s = [sparse(Diagonal([nosq, nosq, nesq])) for (nosq, nesq) in zip(n‚Çí¬≤·µ£s,n‚Çë¬≤·µ£s)]

Œµ_LN = sparse(Diagonal([n‚Çí¬≤_MgO_LiNbO‚ÇÉ_sym, n‚Çí¬≤_MgO_LiNbO‚ÇÉ_sym, n‚Çë¬≤_MgO_LiNbO‚ÇÉ_sym]))
[eps->(eps-1) for eps in diag(Œµ_LN)]

@variables Œª‚ÇÅ, Œª‚ÇÇ
Œª‚ÇÉ = Œª‚ÇÅ + Œª‚ÇÇ

[ substitute.( diag(Œµ_LN - 1I), ([Œª=>lm],)) for lm in (Œª‚ÇÅ,Œª‚ÇÇ,Œª‚ÇÉ) ]



reduce(.*,[ substitute.( diag(Œµ_LN - 1I), ([Œª=>lm],)) for lm in (Œª‚ÇÅ,Œª‚ÇÇ,Œª‚ÇÉ) ] )
diagŒµ_m1 = Vector(diag(Œµ_LN)) .- 1
map(lm->substitute.( diagŒµ_m1, ([Œª=>lm],)), (Œª‚ÇÅ,Œª‚ÇÇ,Œª‚ÇÉ) )
mapreduce(lm->substitute.( diagŒµ_m1, ([Œª=>lm],)), .*, (Œª‚ÇÅ,Œª‚ÇÇ,Œª‚ÇÉ) )



Œî‚Çò_factors([Œª‚ÇÅ,Œª‚ÇÇ,Œª‚ÇÉ],Œµ_LN)
Œî‚Çò_factors([1.313,1.313,1.313/2.0],Œµ_LN)

œá·µ£ = œá‚ÅΩ¬≤‚Åæ·µ£_MgO_LiNbO‚ÇÉ
dm = Œî‚Çò_factors([Œª‚ÇÅ,Œª‚ÇÇ,Œª‚ÇÉ],Œµ_LN) ./ Œî‚Çò_factors([1.313,1.313,1.313/2.0],Œµ_LN)
@tullio œá[i,j,k] := œá·µ£[i,j,k] * dm[i] * dm[j] * dm[k] fastmath=true

dm = Œî‚Çò_factors([1.0,1.0,0.5],Œµ_LN) ./ Œî‚Çò_factors([1.313,1.313,1.313/2.0],Œµ_LN)
@tullio œá[i,j,k] := œá·µ£[i,j,k] * dm[i] * dm[j] * dm[k]
œá‚ÅΩ¬≤‚Åæ·µ£_MgO_LiNbO‚ÇÉ
œá‚ÅΩ¬≤‚Åæ_MgO_LiNbO = Œî‚Çò([Œª‚ÇÅ,Œª‚ÇÇ,Œª‚ÇÉ],Œµ_LN,[1.313,1.313,1.313/2.0],œá‚ÅΩ¬≤‚Åæ·µ£_MgO_LiNbO‚ÇÉ)

Œî‚Çò([1.0,1.0,0.5],Œµ_LN,[1.313,1.313,1.313/2.0],œá‚ÅΩ¬≤‚Åæ·µ£_MgO_LiNbO‚ÇÉ)
Œî‚Çò_factors(,Œµ_LN)


substitute( diag(Œµ_LN - 1I), [Œª=>Œª‚ÇÅ])

Œî‚Çò(Œªs, Œµs, Œªs_œá‚ÅΩ¬≤‚Åæ·µ£_MgO_LiNbO‚ÇÉ, Œµ·µ£s,œá‚ÅΩ¬≤‚Åæ·µ£_MgO_LiNbO‚ÇÉ)

œá‚ÅΩ¬≤‚Åæ_MgO_LiNbO‚ÇÉ_sym(Œª::Real) =  œá‚ÅΩ¬≤‚Åæ_MgO_LiNbO‚ÇÉ_sym([Œª,Œª,Œª/2])

using Tullio
function mult(œá::AbstractArray{T,3},v‚ÇÅ::AbstractVector,v‚ÇÇ::AbstractVector) where T<:Real
	@tullio v‚ÇÉ[i] := œá[i,j,k] * v‚ÇÅ[j] * v‚ÇÇ[k]
end

function mult(œá::AbstractArray{T,4},v‚ÇÅ::AbstractVector,v‚ÇÇ::AbstractVector,v‚ÇÉ::AbstractVector) where T<:Real
	@tullio v‚ÇÑ[i] := œá[i,j,k,l] * v‚ÇÅ[j] * v‚ÇÇ[k] * v‚ÇÉ[l]
end

function Œî‚Çò(Œªs::AbstractVector, fŒµ::Function, Œª·µ£s::AbstractVector, œá·µ£::AbstractArray{T,3}) where T
	dm = flat(map( (lm,lmr) -> (diag(fŒµ(lm)).-1.) ./ (diag(fŒµ(lmr)).-1.), Œªs, Œª·µ£s ))
	@tullio œá[i,j,k] := œá·µ£[i,j,k] * dm[i,1] * dm[j,2] * dm[k,3] fastmath=true
end

function Œî‚Çò(Œªs::AbstractVector,Œµ_sym, Œª·µ£s::AbstractVector, œá·µ£::AbstractArray{T,3}) where T
	# dm = Symbolics.value.(Œî‚Çò_factors(Œªs,Œµ_sym) ./ Œî‚Çò_factors(Œª·µ£s,Œµ_sym))
	dm = Œî‚Çò_factors(Œªs,Œµ_sym) ./ Œî‚Çò_factors(Œª·µ£s,Œµ_sym)
	@tullio œá[i,j,k] := œá·µ£[i,j,k] * dm[i] * dm[j] * dm[k] fastmath=true
end




##
struct Material{T}
	Œµ::T
	fŒµ::Function
	fng::Function
	fgvd::Function
	# fœá‚ÅΩ¬≤‚Åæ::Function
end

##

ngLN_sym = sparse(Diagonal(ng.([n‚Çí_MgO_LiNbO‚ÇÉ_sym,n‚Çí_MgO_LiNbO‚ÇÉ_sym,n‚Çë_MgO_LiNbO‚ÇÉ_sym])))

Num |> supertypes

ngLN_expr = build_function(ng(n‚Çí_MgO_LiNbO‚ÇÉ_sym), Œª) #expresssion = false, parallel=Symbolics.MultithreadedForm())

ngLN = eval(build_function(ngLN_sym,
	Œª;
	expresssion = Val{false}, )[1])
	# parallel=Symbolics.MultithreadedForm())[1])
ngLNfast = build_function(ngLN_sym,
	Œª;
	expresssion = Val{false})[2] |> eval


ngLN


ngLN(0.9)

using ChainRules, Zygote, ForwardDiff

ForwardDiff.derivative(x->ngLN(x),0.9)
ForwardDiff.derivative(x->sum(ngLN(x)),0.9)
Zygote.gradient(x->sum(ngLN(x)),0.9)

struct Material{T}
	Œµ::T
	fŒµ::Function
	fng::Function
	fgvd::Function
end

substitute(n‚Çí¬≤_MgO_LiNbO‚ÇÉ_sym,[Œª=>0.8])

@variables Œ∏
using Rotations, StaticArrays, SparseArrays

R1 = RotY(0.1)

Matrix(RotY(Œ∏))





SMatrix{3,3}(R1)
